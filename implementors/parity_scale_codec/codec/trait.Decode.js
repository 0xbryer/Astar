(function() {var implementors = {};
implementors["ovmi"] = [{"text":"impl Decode for PredicateType","synthetic":false,"types":[]},{"text":"impl Decode for VarType","synthetic":false,"types":[]},{"text":"impl Decode for CompiledPredicate","synthetic":false,"types":[]},{"text":"impl Decode for ConstantVariable","synthetic":false,"types":[]},{"text":"impl Decode for IntermediateCompiledPredicate","synthetic":false,"types":[]},{"text":"impl Decode for AtomicPropositionOrPlaceholder","synthetic":false,"types":[]},{"text":"impl Decode for AtomicProposition","synthetic":false,"types":[]},{"text":"impl Decode for PredicateCall","synthetic":false,"types":[]},{"text":"impl Decode for AtomicPredicateCall","synthetic":false,"types":[]},{"text":"impl Decode for InputPredicateCall","synthetic":false,"types":[]},{"text":"impl Decode for VariablePredicateCall","synthetic":false,"types":[]},{"text":"impl Decode for CompiledPredicateCall","synthetic":false,"types":[]},{"text":"impl Decode for CompiledInput","synthetic":false,"types":[]},{"text":"impl Decode for ConstantInput","synthetic":false,"types":[]},{"text":"impl Decode for LabelInput","synthetic":false,"types":[]},{"text":"impl Decode for NormalInput","synthetic":false,"types":[]},{"text":"impl Decode for VariableInput","synthetic":false,"types":[]},{"text":"impl Decode for SelfInput","synthetic":false,"types":[]},{"text":"impl Decode for LogicalConnective","synthetic":false,"types":[]},{"text":"impl&lt;Address&gt; Decode for PredicateCallInputs&lt;Address&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;LogicalConnectiveCallInputs&lt;Address&gt;: Decode,<br>&nbsp;&nbsp;&nbsp;&nbsp;LogicalConnectiveCallInputs&lt;Address&gt;: Decode,<br>&nbsp;&nbsp;&nbsp;&nbsp;CompiledPredicateCallInputs&lt;Address&gt;: Decode,<br>&nbsp;&nbsp;&nbsp;&nbsp;CompiledPredicateCallInputs&lt;Address&gt;: Decode,&nbsp;</span>","synthetic":false,"types":[]},{"text":"impl Decode for AtomicPredicateCallInputs","synthetic":false,"types":[]},{"text":"impl Decode for DecidablePredicateCallInputs","synthetic":false,"types":[]},{"text":"impl&lt;Address&gt; Decode for LogicalConnectiveCallInputs&lt;Address&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;Property&lt;Address&gt;: Decode,<br>&nbsp;&nbsp;&nbsp;&nbsp;Property&lt;Address&gt;: Decode,&nbsp;</span>","synthetic":false,"types":[]},{"text":"impl Decode for BaseAtomicPredicateCallInputs","synthetic":false,"types":[]},{"text":"impl&lt;Address&gt; Decode for CompiledPredicateCallInputs&lt;Address&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;Property&lt;Address&gt;: Decode,<br>&nbsp;&nbsp;&nbsp;&nbsp;Property&lt;Address&gt;: Decode,&nbsp;</span>","synthetic":false,"types":[]},{"text":"impl&lt;Address&gt; Decode for Property&lt;Address&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;Address: Decode,<br>&nbsp;&nbsp;&nbsp;&nbsp;Address: Decode,&nbsp;</span>","synthetic":false,"types":[]},{"text":"impl Decode for PredicateTypeSerializable","synthetic":false,"types":[]},{"text":"impl Decode for VarTypeSerializable","synthetic":false,"types":[]},{"text":"impl Decode for CompiledPredicateSerializable","synthetic":false,"types":[]},{"text":"impl Decode for ConstantVariableSerializable","synthetic":false,"types":[]},{"text":"impl Decode for IntermediateCompiledPredicateSerializable","synthetic":false,"types":[]},{"text":"impl Decode for AtomicPropositionOrPlaceholderSerializable","synthetic":false,"types":[]},{"text":"impl Decode for AtomicPropositionSerializable","synthetic":false,"types":[]},{"text":"impl Decode for PredicateCallSerializable","synthetic":false,"types":[]},{"text":"impl Decode for AtomicPredicateCallSerializable","synthetic":false,"types":[]},{"text":"impl Decode for InputPredicateCallSerializable","synthetic":false,"types":[]},{"text":"impl Decode for VariablePredicateCallSerializable","synthetic":false,"types":[]},{"text":"impl Decode for CompiledPredicateCallSerializable","synthetic":false,"types":[]},{"text":"impl Decode for CompiledInputSerializable","synthetic":false,"types":[]},{"text":"impl Decode for ConstantInputSerializable","synthetic":false,"types":[]},{"text":"impl Decode for LabelInputSerializable","synthetic":false,"types":[]},{"text":"impl Decode for NormalInputSerializable","synthetic":false,"types":[]},{"text":"impl Decode for VariableInputSerializable","synthetic":false,"types":[]},{"text":"impl Decode for SelfInputSerializable","synthetic":false,"types":[]},{"text":"impl Decode for LogicalConnectiveSerializable","synthetic":false,"types":[]},{"text":"impl&lt;Address&gt; Decode for VarValue&lt;Address&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;Address: Decode,<br>&nbsp;&nbsp;&nbsp;&nbsp;Address: Decode,&nbsp;</span>","synthetic":false,"types":[]},{"text":"impl Decode for AccountId","synthetic":false,"types":[]},{"text":"impl Decode for Range","synthetic":false,"types":[]}];
implementors["pallet_contract_operator"] = [{"text":"impl Decode for DefaultParameters","synthetic":false,"types":[]},{"text":"impl&lt;T:&nbsp;Trait&gt; Decode for Call&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;CodeHash&lt;T&gt;: Decode,<br>&nbsp;&nbsp;&nbsp;&nbsp;CodeHash&lt;T&gt;: Decode,<br>&nbsp;&nbsp;&nbsp;&nbsp;T::Parameters: Decode,<br>&nbsp;&nbsp;&nbsp;&nbsp;T::Parameters: Decode,<br>&nbsp;&nbsp;&nbsp;&nbsp;T::AccountId: Decode,<br>&nbsp;&nbsp;&nbsp;&nbsp;T::AccountId: Decode,<br>&nbsp;&nbsp;&nbsp;&nbsp;T::Parameters: Decode,<br>&nbsp;&nbsp;&nbsp;&nbsp;T::Parameters: Decode,<br>&nbsp;&nbsp;&nbsp;&nbsp;Vec&lt;T::AccountId&gt;: Decode,<br>&nbsp;&nbsp;&nbsp;&nbsp;Vec&lt;T::AccountId&gt;: Decode,<br>&nbsp;&nbsp;&nbsp;&nbsp;T::AccountId: Decode,<br>&nbsp;&nbsp;&nbsp;&nbsp;T::AccountId: Decode,<br>&nbsp;&nbsp;&nbsp;&nbsp;BalanceOf&lt;T&gt;: HasCompact,&nbsp;</span>","synthetic":false,"types":[]},{"text":"impl&lt;AccountId, Parameters&gt; Decode for RawEvent&lt;AccountId, Parameters&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;AccountId: Decode,<br>&nbsp;&nbsp;&nbsp;&nbsp;AccountId: Decode,<br>&nbsp;&nbsp;&nbsp;&nbsp;AccountId: Decode,<br>&nbsp;&nbsp;&nbsp;&nbsp;AccountId: Decode,<br>&nbsp;&nbsp;&nbsp;&nbsp;AccountId: Decode,<br>&nbsp;&nbsp;&nbsp;&nbsp;AccountId: Decode,<br>&nbsp;&nbsp;&nbsp;&nbsp;Parameters: Decode,<br>&nbsp;&nbsp;&nbsp;&nbsp;Parameters: Decode,&nbsp;</span>","synthetic":false,"types":[]}];
implementors["pallet_custom_signatures"] = [{"text":"impl Decode for EthereumSignature","synthetic":false,"types":[]},{"text":"impl&lt;AccountId&gt; Decode for RawEvent&lt;AccountId&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;AccountId: Decode,<br>&nbsp;&nbsp;&nbsp;&nbsp;AccountId: Decode,&nbsp;</span>","synthetic":false,"types":[]},{"text":"impl&lt;T:&nbsp;Trait&gt; Decode for Call&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;Box&lt;&lt;T as Trait&gt;::Call&gt;: Decode,<br>&nbsp;&nbsp;&nbsp;&nbsp;Box&lt;&lt;T as Trait&gt;::Call&gt;: Decode,<br>&nbsp;&nbsp;&nbsp;&nbsp;T::AccountId: Decode,<br>&nbsp;&nbsp;&nbsp;&nbsp;T::AccountId: Decode,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;T as Trait&gt;::Signature: Decode,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;T as Trait&gt;::Signature: Decode,&nbsp;</span>","synthetic":false,"types":[]}];
implementors["pallet_dapps_staking"] = [{"text":"impl Decode for StakingParameters","synthetic":false,"types":[]},{"text":"impl&lt;AccountId, Balance&gt; Decode for Nominations&lt;AccountId, Balance&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;Vec&lt;(AccountId, Balance)&gt;: Decode,<br>&nbsp;&nbsp;&nbsp;&nbsp;Vec&lt;(AccountId, Balance)&gt;: Decode,&nbsp;</span>","synthetic":false,"types":[]},{"text":"impl&lt;AccountId:&nbsp;Ord, Balance:&nbsp;HasCompact&gt; Decode for EraStakingPoints&lt;AccountId, Balance&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;Balance: Decode,<br>&nbsp;&nbsp;&nbsp;&nbsp;Balance: Decode,<br>&nbsp;&nbsp;&nbsp;&nbsp;BTreeMap&lt;AccountId, Balance&gt;: Decode,<br>&nbsp;&nbsp;&nbsp;&nbsp;BTreeMap&lt;AccountId, Balance&gt;: Decode,&nbsp;</span>","synthetic":false,"types":[]},{"text":"impl&lt;Balance:&nbsp;HasCompact&gt; Decode for UnlockChunk&lt;Balance&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;Balance: HasCompact,&nbsp;</span>","synthetic":false,"types":[]},{"text":"impl&lt;AccountId, Balance:&nbsp;HasCompact&gt; Decode for StakingLedger&lt;AccountId, Balance&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;AccountId: Decode,<br>&nbsp;&nbsp;&nbsp;&nbsp;AccountId: Decode,<br>&nbsp;&nbsp;&nbsp;&nbsp;Vec&lt;UnlockChunk&lt;Balance&gt;&gt;: Decode,<br>&nbsp;&nbsp;&nbsp;&nbsp;Vec&lt;UnlockChunk&lt;Balance&gt;&gt;: Decode,<br>&nbsp;&nbsp;&nbsp;&nbsp;Balance: HasCompact,<br>&nbsp;&nbsp;&nbsp;&nbsp;Balance: HasCompact,&nbsp;</span>","synthetic":false,"types":[]},{"text":"impl Decode for Vote","synthetic":false,"types":[]},{"text":"impl Decode for VoteCounts","synthetic":false,"types":[]},{"text":"impl&lt;AccountId, Balance&gt; Decode for RawEvent&lt;AccountId, Balance&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;Balance: Decode,<br>&nbsp;&nbsp;&nbsp;&nbsp;Balance: Decode,<br>&nbsp;&nbsp;&nbsp;&nbsp;Balance: Decode,<br>&nbsp;&nbsp;&nbsp;&nbsp;Balance: Decode,<br>&nbsp;&nbsp;&nbsp;&nbsp;AccountId: Decode,<br>&nbsp;&nbsp;&nbsp;&nbsp;AccountId: Decode,<br>&nbsp;&nbsp;&nbsp;&nbsp;Balance: Decode,<br>&nbsp;&nbsp;&nbsp;&nbsp;Balance: Decode,<br>&nbsp;&nbsp;&nbsp;&nbsp;AccountId: Decode,<br>&nbsp;&nbsp;&nbsp;&nbsp;AccountId: Decode,<br>&nbsp;&nbsp;&nbsp;&nbsp;Balance: Decode,<br>&nbsp;&nbsp;&nbsp;&nbsp;Balance: Decode,<br>&nbsp;&nbsp;&nbsp;&nbsp;AccountId: Decode,<br>&nbsp;&nbsp;&nbsp;&nbsp;AccountId: Decode,<br>&nbsp;&nbsp;&nbsp;&nbsp;Balance: Decode,<br>&nbsp;&nbsp;&nbsp;&nbsp;Balance: Decode,<br>&nbsp;&nbsp;&nbsp;&nbsp;Balance: Decode,<br>&nbsp;&nbsp;&nbsp;&nbsp;Balance: Decode,<br>&nbsp;&nbsp;&nbsp;&nbsp;AccountId: Decode,<br>&nbsp;&nbsp;&nbsp;&nbsp;AccountId: Decode,&nbsp;</span>","synthetic":false,"types":[]},{"text":"impl&lt;T:&nbsp;Trait&gt; Decode for Call&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;T::Lookup as StaticLookup&gt;::Source: Decode,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;T::Lookup as StaticLookup&gt;::Source: Decode,<br>&nbsp;&nbsp;&nbsp;&nbsp;RewardDestination&lt;T::AccountId&gt;: Decode,<br>&nbsp;&nbsp;&nbsp;&nbsp;RewardDestination&lt;T::AccountId&gt;: Decode,<br>&nbsp;&nbsp;&nbsp;&nbsp;Vec&lt;(&lt;T::Lookup as StaticLookup&gt;::Source, BalanceOf&lt;T&gt;)&gt;: Decode,<br>&nbsp;&nbsp;&nbsp;&nbsp;Vec&lt;(&lt;T::Lookup as StaticLookup&gt;::Source, BalanceOf&lt;T&gt;)&gt;: Decode,<br>&nbsp;&nbsp;&nbsp;&nbsp;Vec&lt;(&lt;T::Lookup as StaticLookup&gt;::Source, Vote)&gt;: Decode,<br>&nbsp;&nbsp;&nbsp;&nbsp;Vec&lt;(&lt;T::Lookup as StaticLookup&gt;::Source, Vote)&gt;: Decode,<br>&nbsp;&nbsp;&nbsp;&nbsp;RewardDestination&lt;T::AccountId&gt;: Decode,<br>&nbsp;&nbsp;&nbsp;&nbsp;RewardDestination&lt;T::AccountId&gt;: Decode,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;T::Lookup as StaticLookup&gt;::Source: Decode,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;T::Lookup as StaticLookup&gt;::Source: Decode,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;T::Lookup as StaticLookup&gt;::Source: Decode,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;T::Lookup as StaticLookup&gt;::Source: Decode,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;T::Lookup as StaticLookup&gt;::Source: Decode,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;T::Lookup as StaticLookup&gt;::Source: Decode,<br>&nbsp;&nbsp;&nbsp;&nbsp;BalanceOf&lt;T&gt;: HasCompact,<br>&nbsp;&nbsp;&nbsp;&nbsp;BalanceOf&lt;T&gt;: HasCompact,<br>&nbsp;&nbsp;&nbsp;&nbsp;BalanceOf&lt;T&gt;: HasCompact,&nbsp;</span>","synthetic":false,"types":[]}];
implementors["pallet_operator_trading"] = [{"text":"impl Decode for OfferState","synthetic":false,"types":[]},{"text":"impl&lt;AccountId, Balance, Moment&gt; Decode for Offer&lt;AccountId, Balance, Moment&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;AccountId: Decode,<br>&nbsp;&nbsp;&nbsp;&nbsp;AccountId: Decode,<br>&nbsp;&nbsp;&nbsp;&nbsp;AccountId: Decode,<br>&nbsp;&nbsp;&nbsp;&nbsp;AccountId: Decode,<br>&nbsp;&nbsp;&nbsp;&nbsp;Vec&lt;AccountId&gt;: Decode,<br>&nbsp;&nbsp;&nbsp;&nbsp;Vec&lt;AccountId&gt;: Decode,<br>&nbsp;&nbsp;&nbsp;&nbsp;Balance: Decode,<br>&nbsp;&nbsp;&nbsp;&nbsp;Balance: Decode,<br>&nbsp;&nbsp;&nbsp;&nbsp;Moment: Decode,<br>&nbsp;&nbsp;&nbsp;&nbsp;Moment: Decode,&nbsp;</span>","synthetic":false,"types":[]},{"text":"impl&lt;T:&nbsp;Trait&gt; Decode for Call&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T::AccountId: Decode,<br>&nbsp;&nbsp;&nbsp;&nbsp;T::AccountId: Decode,<br>&nbsp;&nbsp;&nbsp;&nbsp;Vec&lt;T::AccountId&gt;: Decode,<br>&nbsp;&nbsp;&nbsp;&nbsp;Vec&lt;T::AccountId&gt;: Decode,<br>&nbsp;&nbsp;&nbsp;&nbsp;BalanceOf&lt;T&gt;: Decode,<br>&nbsp;&nbsp;&nbsp;&nbsp;BalanceOf&lt;T&gt;: Decode,<br>&nbsp;&nbsp;&nbsp;&nbsp;T::BlockNumber: Decode,<br>&nbsp;&nbsp;&nbsp;&nbsp;T::BlockNumber: Decode,<br>&nbsp;&nbsp;&nbsp;&nbsp;T::AccountId: Decode,<br>&nbsp;&nbsp;&nbsp;&nbsp;T::AccountId: Decode,<br>&nbsp;&nbsp;&nbsp;&nbsp;T::AccountId: Decode,<br>&nbsp;&nbsp;&nbsp;&nbsp;T::AccountId: Decode,&nbsp;</span>","synthetic":false,"types":[]},{"text":"impl&lt;AccountId&gt; Decode for RawEvent&lt;AccountId&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;AccountId: Decode,<br>&nbsp;&nbsp;&nbsp;&nbsp;AccountId: Decode,<br>&nbsp;&nbsp;&nbsp;&nbsp;AccountId: Decode,<br>&nbsp;&nbsp;&nbsp;&nbsp;AccountId: Decode,<br>&nbsp;&nbsp;&nbsp;&nbsp;AccountId: Decode,<br>&nbsp;&nbsp;&nbsp;&nbsp;AccountId: Decode,<br>&nbsp;&nbsp;&nbsp;&nbsp;AccountId: Decode,<br>&nbsp;&nbsp;&nbsp;&nbsp;AccountId: Decode,<br>&nbsp;&nbsp;&nbsp;&nbsp;AccountId: Decode,<br>&nbsp;&nbsp;&nbsp;&nbsp;AccountId: Decode,<br>&nbsp;&nbsp;&nbsp;&nbsp;AccountId: Decode,<br>&nbsp;&nbsp;&nbsp;&nbsp;AccountId: Decode,<br>&nbsp;&nbsp;&nbsp;&nbsp;AccountId: Decode,<br>&nbsp;&nbsp;&nbsp;&nbsp;AccountId: Decode,&nbsp;</span>","synthetic":false,"types":[]}];
implementors["pallet_ovm"] = [{"text":"impl Decode for PrefabOvmModule","synthetic":false,"types":[]},{"text":"impl&lt;CodeHash&gt; Decode for PredicateContract&lt;CodeHash&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;CodeHash: Decode,<br>&nbsp;&nbsp;&nbsp;&nbsp;CodeHash: Decode,&nbsp;</span>","synthetic":false,"types":[]},{"text":"impl&lt;AccountId&gt; Decode for Property&lt;AccountId&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;AccountId: Decode,<br>&nbsp;&nbsp;&nbsp;&nbsp;AccountId: Decode,&nbsp;</span>","synthetic":false,"types":[]},{"text":"impl Decode for Decision","synthetic":false,"types":[]},{"text":"impl&lt;Hash, BlockNumber&gt; Decode for ChallengeGame&lt;Hash, BlockNumber&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;Hash: Decode,<br>&nbsp;&nbsp;&nbsp;&nbsp;Hash: Decode,<br>&nbsp;&nbsp;&nbsp;&nbsp;Vec&lt;Hash&gt;: Decode,<br>&nbsp;&nbsp;&nbsp;&nbsp;Vec&lt;Hash&gt;: Decode,<br>&nbsp;&nbsp;&nbsp;&nbsp;BlockNumber: Decode,<br>&nbsp;&nbsp;&nbsp;&nbsp;BlockNumber: Decode,&nbsp;</span>","synthetic":false,"types":[]},{"text":"impl Decode for Schedule","synthetic":false,"types":[]},{"text":"impl&lt;AccountId, Property, Hash, BlockNumber&gt; Decode for RawEvent&lt;AccountId, Property, Hash, BlockNumber&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;Hash: Decode,<br>&nbsp;&nbsp;&nbsp;&nbsp;Hash: Decode,<br>&nbsp;&nbsp;&nbsp;&nbsp;AccountId: Decode,<br>&nbsp;&nbsp;&nbsp;&nbsp;AccountId: Decode,<br>&nbsp;&nbsp;&nbsp;&nbsp;Hash: Decode,<br>&nbsp;&nbsp;&nbsp;&nbsp;Hash: Decode,<br>&nbsp;&nbsp;&nbsp;&nbsp;Property: Decode,<br>&nbsp;&nbsp;&nbsp;&nbsp;Property: Decode,<br>&nbsp;&nbsp;&nbsp;&nbsp;BlockNumber: Decode,<br>&nbsp;&nbsp;&nbsp;&nbsp;BlockNumber: Decode,<br>&nbsp;&nbsp;&nbsp;&nbsp;Hash: Decode,<br>&nbsp;&nbsp;&nbsp;&nbsp;Hash: Decode,<br>&nbsp;&nbsp;&nbsp;&nbsp;Hash: Decode,<br>&nbsp;&nbsp;&nbsp;&nbsp;Hash: Decode,<br>&nbsp;&nbsp;&nbsp;&nbsp;Hash: Decode,<br>&nbsp;&nbsp;&nbsp;&nbsp;Hash: Decode,<br>&nbsp;&nbsp;&nbsp;&nbsp;Hash: Decode,<br>&nbsp;&nbsp;&nbsp;&nbsp;Hash: Decode,<br>&nbsp;&nbsp;&nbsp;&nbsp;Hash: Decode,<br>&nbsp;&nbsp;&nbsp;&nbsp;Hash: Decode,&nbsp;</span>","synthetic":false,"types":[]},{"text":"impl&lt;T:&nbsp;Trait&gt; Decode for Call&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;T as Trait&gt;::Hash: Decode,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;T as Trait&gt;::Hash: Decode,<br>&nbsp;&nbsp;&nbsp;&nbsp;PropertyOf&lt;T&gt;: Decode,<br>&nbsp;&nbsp;&nbsp;&nbsp;PropertyOf&lt;T&gt;: Decode,<br>&nbsp;&nbsp;&nbsp;&nbsp;PropertyOf&lt;T&gt;: Decode,<br>&nbsp;&nbsp;&nbsp;&nbsp;PropertyOf&lt;T&gt;: Decode,<br>&nbsp;&nbsp;&nbsp;&nbsp;PropertyOf&lt;T&gt;: Decode,<br>&nbsp;&nbsp;&nbsp;&nbsp;PropertyOf&lt;T&gt;: Decode,<br>&nbsp;&nbsp;&nbsp;&nbsp;PropertyOf&lt;T&gt;: Decode,<br>&nbsp;&nbsp;&nbsp;&nbsp;PropertyOf&lt;T&gt;: Decode,<br>&nbsp;&nbsp;&nbsp;&nbsp;PropertyOf&lt;T&gt;: Decode,<br>&nbsp;&nbsp;&nbsp;&nbsp;PropertyOf&lt;T&gt;: Decode,<br>&nbsp;&nbsp;&nbsp;&nbsp;PropertyOf&lt;T&gt;: Decode,<br>&nbsp;&nbsp;&nbsp;&nbsp;PropertyOf&lt;T&gt;: Decode,<br>&nbsp;&nbsp;&nbsp;&nbsp;PropertyOf&lt;T&gt;: Decode,<br>&nbsp;&nbsp;&nbsp;&nbsp;PropertyOf&lt;T&gt;: Decode,&nbsp;</span>","synthetic":false,"types":[]}];
implementors["pallet_plasm_lockdrop"] = [{"text":"impl Decode for LockCheck","synthetic":false,"types":[]},{"text":"impl Decode for EcdsaSignature","synthetic":false,"types":[]},{"text":"impl Decode for Lockdrop","synthetic":false,"types":[]},{"text":"impl&lt;AuthorityId:&nbsp;Ord&gt; Decode for Claim&lt;AuthorityId&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;BTreeSet&lt;AuthorityId&gt;: Decode,<br>&nbsp;&nbsp;&nbsp;&nbsp;BTreeSet&lt;AuthorityId&gt;: Decode,<br>&nbsp;&nbsp;&nbsp;&nbsp;BTreeSet&lt;AuthorityId&gt;: Decode,<br>&nbsp;&nbsp;&nbsp;&nbsp;BTreeSet&lt;AuthorityId&gt;: Decode,&nbsp;</span>","synthetic":false,"types":[]},{"text":"impl Decode for ClaimVote","synthetic":false,"types":[]},{"text":"impl&lt;DollarRate:&nbsp;Member + Parameter&gt; Decode for TickerRate&lt;DollarRate&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;DollarRate: Decode,<br>&nbsp;&nbsp;&nbsp;&nbsp;DollarRate: Decode,<br>&nbsp;&nbsp;&nbsp;&nbsp;DollarRate: Decode,<br>&nbsp;&nbsp;&nbsp;&nbsp;DollarRate: Decode,&nbsp;</span>","synthetic":false,"types":[]},{"text":"impl&lt;AccountId, AuthorityId, DollarRate, Balance&gt; Decode for RawEvent&lt;AccountId, AuthorityId, DollarRate, Balance&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;AuthorityId: Decode,<br>&nbsp;&nbsp;&nbsp;&nbsp;AuthorityId: Decode,<br>&nbsp;&nbsp;&nbsp;&nbsp;AccountId: Decode,<br>&nbsp;&nbsp;&nbsp;&nbsp;AccountId: Decode,<br>&nbsp;&nbsp;&nbsp;&nbsp;Balance: Decode,<br>&nbsp;&nbsp;&nbsp;&nbsp;Balance: Decode,<br>&nbsp;&nbsp;&nbsp;&nbsp;DollarRate: Decode,<br>&nbsp;&nbsp;&nbsp;&nbsp;DollarRate: Decode,<br>&nbsp;&nbsp;&nbsp;&nbsp;DollarRate: Decode,<br>&nbsp;&nbsp;&nbsp;&nbsp;DollarRate: Decode,<br>&nbsp;&nbsp;&nbsp;&nbsp;Vec&lt;AuthorityId&gt;: Decode,<br>&nbsp;&nbsp;&nbsp;&nbsp;Vec&lt;AuthorityId&gt;: Decode,&nbsp;</span>","synthetic":false,"types":[]},{"text":"impl&lt;T:&nbsp;Trait&gt; Decode for Call&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T::AccountId: Decode,<br>&nbsp;&nbsp;&nbsp;&nbsp;T::AccountId: Decode,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;T::AuthorityId as RuntimeAppPublic&gt;::Signature: Decode,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;T::AuthorityId as RuntimeAppPublic&gt;::Signature: Decode,<br>&nbsp;&nbsp;&nbsp;&nbsp;TickerRate&lt;T::DollarRate&gt;: Decode,<br>&nbsp;&nbsp;&nbsp;&nbsp;TickerRate&lt;T::DollarRate&gt;: Decode,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;T::AuthorityId as RuntimeAppPublic&gt;::Signature: Decode,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;T::AuthorityId as RuntimeAppPublic&gt;::Signature: Decode,<br>&nbsp;&nbsp;&nbsp;&nbsp;T::BlockNumber: Decode,<br>&nbsp;&nbsp;&nbsp;&nbsp;T::BlockNumber: Decode,<br>&nbsp;&nbsp;&nbsp;&nbsp;T::BlockNumber: Decode,<br>&nbsp;&nbsp;&nbsp;&nbsp;T::BlockNumber: Decode,<br>&nbsp;&nbsp;&nbsp;&nbsp;Vec&lt;T::AuthorityId&gt;: Decode,<br>&nbsp;&nbsp;&nbsp;&nbsp;Vec&lt;T::AuthorityId&gt;: Decode,&nbsp;</span>","synthetic":false,"types":[]}];
implementors["pallet_plasm_rewards"] = [{"text":"impl Decode for Releases","synthetic":false,"types":[]},{"text":"impl&lt;Moment&gt; Decode for ActiveEraInfo&lt;Moment&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;Option&lt;Moment&gt;: Decode,<br>&nbsp;&nbsp;&nbsp;&nbsp;Option&lt;Moment&gt;: Decode,&nbsp;</span>","synthetic":false,"types":[]},{"text":"impl&lt;Balance&gt; Decode for RawEvent&lt;Balance&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;Balance: Decode,<br>&nbsp;&nbsp;&nbsp;&nbsp;Balance: Decode,&nbsp;</span>","synthetic":false,"types":[]},{"text":"impl&lt;T:&nbsp;Trait&gt; Decode for Call&lt;T&gt;","synthetic":false,"types":[]}];
implementors["pallet_plasm_validator"] = [{"text":"impl&lt;T:&nbsp;Trait&gt; Decode for Call&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;Vec&lt;T::AccountId&gt;: Decode,<br>&nbsp;&nbsp;&nbsp;&nbsp;Vec&lt;T::AccountId&gt;: Decode,&nbsp;</span>","synthetic":false,"types":[]},{"text":"impl&lt;AccountId, Balance&gt; Decode for RawEvent&lt;AccountId, Balance&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;Vec&lt;AccountId&gt;: Decode,<br>&nbsp;&nbsp;&nbsp;&nbsp;Vec&lt;AccountId&gt;: Decode,<br>&nbsp;&nbsp;&nbsp;&nbsp;AccountId: Decode,<br>&nbsp;&nbsp;&nbsp;&nbsp;AccountId: Decode,<br>&nbsp;&nbsp;&nbsp;&nbsp;Balance: Decode,<br>&nbsp;&nbsp;&nbsp;&nbsp;Balance: Decode,<br>&nbsp;&nbsp;&nbsp;&nbsp;Balance: Decode,<br>&nbsp;&nbsp;&nbsp;&nbsp;Balance: Decode,&nbsp;</span>","synthetic":false,"types":[]}];
implementors["pallet_plasma"] = [{"text":"impl&lt;Balance&gt; Decode for Range&lt;Balance&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;Balance: Decode,<br>&nbsp;&nbsp;&nbsp;&nbsp;Balance: Decode,<br>&nbsp;&nbsp;&nbsp;&nbsp;Balance: Decode,<br>&nbsp;&nbsp;&nbsp;&nbsp;Balance: Decode,&nbsp;</span>","synthetic":false,"types":[]},{"text":"impl&lt;AccountId, Balance, BlockNumber&gt; Decode for StateUpdate&lt;AccountId, Balance, BlockNumber&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;AccountId: Decode,<br>&nbsp;&nbsp;&nbsp;&nbsp;AccountId: Decode,<br>&nbsp;&nbsp;&nbsp;&nbsp;Range&lt;Balance&gt;: Decode,<br>&nbsp;&nbsp;&nbsp;&nbsp;Range&lt;Balance&gt;: Decode,<br>&nbsp;&nbsp;&nbsp;&nbsp;BlockNumber: Decode,<br>&nbsp;&nbsp;&nbsp;&nbsp;BlockNumber: Decode,<br>&nbsp;&nbsp;&nbsp;&nbsp;Property&lt;AccountId&gt;: Decode,<br>&nbsp;&nbsp;&nbsp;&nbsp;Property&lt;AccountId&gt;: Decode,&nbsp;</span>","synthetic":false,"types":[]},{"text":"impl&lt;AccountId&gt; Decode for Checkpoint&lt;AccountId&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;Property&lt;AccountId&gt;: Decode,<br>&nbsp;&nbsp;&nbsp;&nbsp;Property&lt;AccountId&gt;: Decode,&nbsp;</span>","synthetic":false,"types":[]},{"text":"impl&lt;AccountId, BlockNumber, Balance, Hash&gt; Decode for Exit&lt;AccountId, BlockNumber, Balance, Hash&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;StateUpdate&lt;AccountId, Balance, BlockNumber&gt;: Decode,<br>&nbsp;&nbsp;&nbsp;&nbsp;StateUpdate&lt;AccountId, Balance, BlockNumber&gt;: Decode,<br>&nbsp;&nbsp;&nbsp;&nbsp;InclusionProof&lt;AccountId, Balance, Hash&gt;: Decode,<br>&nbsp;&nbsp;&nbsp;&nbsp;InclusionProof&lt;AccountId, Balance, Hash&gt;: Decode,&nbsp;</span>","synthetic":false,"types":[]},{"text":"impl&lt;AccountId, Balance, Hash&gt; Decode for InclusionProof&lt;AccountId, Balance, Hash&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;AddressInclusionProof&lt;AccountId, Balance, Hash&gt;: Decode,<br>&nbsp;&nbsp;&nbsp;&nbsp;AddressInclusionProof&lt;AccountId, Balance, Hash&gt;: Decode,<br>&nbsp;&nbsp;&nbsp;&nbsp;IntervalInclusionProof&lt;Balance, Hash&gt;: Decode,<br>&nbsp;&nbsp;&nbsp;&nbsp;IntervalInclusionProof&lt;Balance, Hash&gt;: Decode,&nbsp;</span>","synthetic":false,"types":[]},{"text":"impl&lt;Balance, Hash&gt; Decode for IntervalInclusionProof&lt;Balance, Hash&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;Balance: Decode,<br>&nbsp;&nbsp;&nbsp;&nbsp;Balance: Decode,<br>&nbsp;&nbsp;&nbsp;&nbsp;Balance: Decode,<br>&nbsp;&nbsp;&nbsp;&nbsp;Balance: Decode,<br>&nbsp;&nbsp;&nbsp;&nbsp;Vec&lt;IntervalTreeNode&lt;Balance, Hash&gt;&gt;: Decode,<br>&nbsp;&nbsp;&nbsp;&nbsp;Vec&lt;IntervalTreeNode&lt;Balance, Hash&gt;&gt;: Decode,&nbsp;</span>","synthetic":false,"types":[]},{"text":"impl&lt;AccountId, Balance, Hash&gt; Decode for AddressInclusionProof&lt;AccountId, Balance, Hash&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;AccountId: Decode,<br>&nbsp;&nbsp;&nbsp;&nbsp;AccountId: Decode,<br>&nbsp;&nbsp;&nbsp;&nbsp;Balance: Decode,<br>&nbsp;&nbsp;&nbsp;&nbsp;Balance: Decode,<br>&nbsp;&nbsp;&nbsp;&nbsp;Vec&lt;AddressTreeNode&lt;AccountId, Hash&gt;&gt;: Decode,<br>&nbsp;&nbsp;&nbsp;&nbsp;Vec&lt;AddressTreeNode&lt;AccountId, Hash&gt;&gt;: Decode,&nbsp;</span>","synthetic":false,"types":[]},{"text":"impl&lt;Balance, Hash&gt; Decode for IntervalTreeNode&lt;Balance, Hash&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;Hash: Decode,<br>&nbsp;&nbsp;&nbsp;&nbsp;Hash: Decode,<br>&nbsp;&nbsp;&nbsp;&nbsp;Balance: Decode,<br>&nbsp;&nbsp;&nbsp;&nbsp;Balance: Decode,&nbsp;</span>","synthetic":false,"types":[]},{"text":"impl&lt;AccountId, Hash&gt; Decode for AddressTreeNode&lt;AccountId, Hash&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;Hash: Decode,<br>&nbsp;&nbsp;&nbsp;&nbsp;Hash: Decode,<br>&nbsp;&nbsp;&nbsp;&nbsp;AccountId: Decode,<br>&nbsp;&nbsp;&nbsp;&nbsp;AccountId: Decode,&nbsp;</span>","synthetic":false,"types":[]},{"text":"impl&lt;AccountId, Balance, BlockNumber&gt; Decode for ExitDeposit&lt;AccountId, Balance, BlockNumber&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;StateUpdate&lt;AccountId, Balance, BlockNumber&gt;: Decode,<br>&nbsp;&nbsp;&nbsp;&nbsp;StateUpdate&lt;AccountId, Balance, BlockNumber&gt;: Decode,<br>&nbsp;&nbsp;&nbsp;&nbsp;Checkpoint&lt;AccountId&gt;: Decode,<br>&nbsp;&nbsp;&nbsp;&nbsp;Checkpoint&lt;AccountId&gt;: Decode,&nbsp;</span>","synthetic":false,"types":[]},{"text":"impl&lt;AccountId, Hash, BlockNumber, Range, Checkpoint&gt; Decode for RawEvent&lt;AccountId, Hash, BlockNumber, Range, Checkpoint&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;AccountId: Decode,<br>&nbsp;&nbsp;&nbsp;&nbsp;AccountId: Decode,<br>&nbsp;&nbsp;&nbsp;&nbsp;AccountId: Decode,<br>&nbsp;&nbsp;&nbsp;&nbsp;AccountId: Decode,<br>&nbsp;&nbsp;&nbsp;&nbsp;AccountId: Decode,<br>&nbsp;&nbsp;&nbsp;&nbsp;AccountId: Decode,<br>&nbsp;&nbsp;&nbsp;&nbsp;BlockNumber: Decode,<br>&nbsp;&nbsp;&nbsp;&nbsp;BlockNumber: Decode,<br>&nbsp;&nbsp;&nbsp;&nbsp;Hash: Decode,<br>&nbsp;&nbsp;&nbsp;&nbsp;Hash: Decode,<br>&nbsp;&nbsp;&nbsp;&nbsp;AccountId: Decode,<br>&nbsp;&nbsp;&nbsp;&nbsp;AccountId: Decode,<br>&nbsp;&nbsp;&nbsp;&nbsp;Hash: Decode,<br>&nbsp;&nbsp;&nbsp;&nbsp;Hash: Decode,<br>&nbsp;&nbsp;&nbsp;&nbsp;Checkpoint: Decode,<br>&nbsp;&nbsp;&nbsp;&nbsp;Checkpoint: Decode,<br>&nbsp;&nbsp;&nbsp;&nbsp;AccountId: Decode,<br>&nbsp;&nbsp;&nbsp;&nbsp;AccountId: Decode,<br>&nbsp;&nbsp;&nbsp;&nbsp;Hash: Decode,<br>&nbsp;&nbsp;&nbsp;&nbsp;Hash: Decode,<br>&nbsp;&nbsp;&nbsp;&nbsp;AccountId: Decode,<br>&nbsp;&nbsp;&nbsp;&nbsp;AccountId: Decode,<br>&nbsp;&nbsp;&nbsp;&nbsp;Range: Decode,<br>&nbsp;&nbsp;&nbsp;&nbsp;Range: Decode,<br>&nbsp;&nbsp;&nbsp;&nbsp;AccountId: Decode,<br>&nbsp;&nbsp;&nbsp;&nbsp;AccountId: Decode,<br>&nbsp;&nbsp;&nbsp;&nbsp;Range: Decode,<br>&nbsp;&nbsp;&nbsp;&nbsp;Range: Decode,&nbsp;</span>","synthetic":false,"types":[]},{"text":"impl&lt;T:&nbsp;Trait&gt; Decode for Call&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T::AccountId: Decode,<br>&nbsp;&nbsp;&nbsp;&nbsp;T::AccountId: Decode,<br>&nbsp;&nbsp;&nbsp;&nbsp;T::AccountId: Decode,<br>&nbsp;&nbsp;&nbsp;&nbsp;T::AccountId: Decode,<br>&nbsp;&nbsp;&nbsp;&nbsp;T::AccountId: Decode,<br>&nbsp;&nbsp;&nbsp;&nbsp;T::AccountId: Decode,<br>&nbsp;&nbsp;&nbsp;&nbsp;T::AccountId: Decode,<br>&nbsp;&nbsp;&nbsp;&nbsp;T::AccountId: Decode,<br>&nbsp;&nbsp;&nbsp;&nbsp;T::AccountId: Decode,<br>&nbsp;&nbsp;&nbsp;&nbsp;T::AccountId: Decode,<br>&nbsp;&nbsp;&nbsp;&nbsp;T::AccountId: Decode,<br>&nbsp;&nbsp;&nbsp;&nbsp;T::AccountId: Decode,<br>&nbsp;&nbsp;&nbsp;&nbsp;T::BlockNumber: Decode,<br>&nbsp;&nbsp;&nbsp;&nbsp;T::BlockNumber: Decode,<br>&nbsp;&nbsp;&nbsp;&nbsp;T::Hash: Decode,<br>&nbsp;&nbsp;&nbsp;&nbsp;T::Hash: Decode,<br>&nbsp;&nbsp;&nbsp;&nbsp;T::AccountId: Decode,<br>&nbsp;&nbsp;&nbsp;&nbsp;T::AccountId: Decode,<br>&nbsp;&nbsp;&nbsp;&nbsp;BalanceOf&lt;T&gt;: Decode,<br>&nbsp;&nbsp;&nbsp;&nbsp;BalanceOf&lt;T&gt;: Decode,<br>&nbsp;&nbsp;&nbsp;&nbsp;PropertyOf&lt;T&gt;: Decode,<br>&nbsp;&nbsp;&nbsp;&nbsp;PropertyOf&lt;T&gt;: Decode,<br>&nbsp;&nbsp;&nbsp;&nbsp;T::AccountId: Decode,<br>&nbsp;&nbsp;&nbsp;&nbsp;T::AccountId: Decode,<br>&nbsp;&nbsp;&nbsp;&nbsp;BalanceOf&lt;T&gt;: Decode,<br>&nbsp;&nbsp;&nbsp;&nbsp;BalanceOf&lt;T&gt;: Decode,<br>&nbsp;&nbsp;&nbsp;&nbsp;T::AccountId: Decode,<br>&nbsp;&nbsp;&nbsp;&nbsp;T::AccountId: Decode,<br>&nbsp;&nbsp;&nbsp;&nbsp;RangeOf&lt;T&gt;: Decode,<br>&nbsp;&nbsp;&nbsp;&nbsp;RangeOf&lt;T&gt;: Decode,<br>&nbsp;&nbsp;&nbsp;&nbsp;BalanceOf&lt;T&gt;: Decode,<br>&nbsp;&nbsp;&nbsp;&nbsp;BalanceOf&lt;T&gt;: Decode,<br>&nbsp;&nbsp;&nbsp;&nbsp;T::AccountId: Decode,<br>&nbsp;&nbsp;&nbsp;&nbsp;T::AccountId: Decode,<br>&nbsp;&nbsp;&nbsp;&nbsp;PropertyOf&lt;T&gt;: Decode,<br>&nbsp;&nbsp;&nbsp;&nbsp;PropertyOf&lt;T&gt;: Decode,<br>&nbsp;&nbsp;&nbsp;&nbsp;T::AccountId: Decode,<br>&nbsp;&nbsp;&nbsp;&nbsp;T::AccountId: Decode,<br>&nbsp;&nbsp;&nbsp;&nbsp;PropertyOf&lt;T&gt;: Decode,<br>&nbsp;&nbsp;&nbsp;&nbsp;PropertyOf&lt;T&gt;: Decode,<br>&nbsp;&nbsp;&nbsp;&nbsp;BalanceOf&lt;T&gt;: Decode,<br>&nbsp;&nbsp;&nbsp;&nbsp;BalanceOf&lt;T&gt;: Decode,<br>&nbsp;&nbsp;&nbsp;&nbsp;T::AccountId: Decode,<br>&nbsp;&nbsp;&nbsp;&nbsp;T::AccountId: Decode,&nbsp;</span>","synthetic":false,"types":[]}];
implementors["plasm_runtime"] = [{"text":"impl Decode for SessionKeys","synthetic":false,"types":[]},{"text":"impl Decode for Event","synthetic":false,"types":[]},{"text":"impl Decode for OriginCaller","synthetic":false,"types":[]},{"text":"impl Decode for Call","synthetic":false,"types":[]}];
if (window.register_implementors) {window.register_implementors(implementors);} else {window.pending_implementors = implementors;}})()