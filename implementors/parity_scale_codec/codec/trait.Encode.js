(function() {var implementors = {};
implementors["ovmi"] = [{"text":"impl Encode for PredicateType","synthetic":false,"types":[]},{"text":"impl Encode for VarType","synthetic":false,"types":[]},{"text":"impl Encode for CompiledPredicate","synthetic":false,"types":[]},{"text":"impl Encode for ConstantVariable","synthetic":false,"types":[]},{"text":"impl Encode for IntermediateCompiledPredicate","synthetic":false,"types":[]},{"text":"impl Encode for AtomicPropositionOrPlaceholder","synthetic":false,"types":[]},{"text":"impl Encode for AtomicProposition","synthetic":false,"types":[]},{"text":"impl Encode for PredicateCall","synthetic":false,"types":[]},{"text":"impl Encode for AtomicPredicateCall","synthetic":false,"types":[]},{"text":"impl Encode for InputPredicateCall","synthetic":false,"types":[]},{"text":"impl Encode for VariablePredicateCall","synthetic":false,"types":[]},{"text":"impl Encode for CompiledPredicateCall","synthetic":false,"types":[]},{"text":"impl Encode for CompiledInput","synthetic":false,"types":[]},{"text":"impl Encode for ConstantInput","synthetic":false,"types":[]},{"text":"impl Encode for LabelInput","synthetic":false,"types":[]},{"text":"impl Encode for NormalInput","synthetic":false,"types":[]},{"text":"impl Encode for VariableInput","synthetic":false,"types":[]},{"text":"impl Encode for SelfInput","synthetic":false,"types":[]},{"text":"impl Encode for LogicalConnective","synthetic":false,"types":[]},{"text":"impl&lt;Address&gt; Encode for PredicateCallInputs&lt;Address&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;LogicalConnectiveCallInputs&lt;Address&gt;: Encode,<br>&nbsp;&nbsp;&nbsp;&nbsp;LogicalConnectiveCallInputs&lt;Address&gt;: Encode,<br>&nbsp;&nbsp;&nbsp;&nbsp;CompiledPredicateCallInputs&lt;Address&gt;: Encode,<br>&nbsp;&nbsp;&nbsp;&nbsp;CompiledPredicateCallInputs&lt;Address&gt;: Encode,&nbsp;</span>","synthetic":false,"types":[]},{"text":"impl Encode for AtomicPredicateCallInputs","synthetic":false,"types":[]},{"text":"impl Encode for DecidablePredicateCallInputs","synthetic":false,"types":[]},{"text":"impl&lt;Address&gt; Encode for LogicalConnectiveCallInputs&lt;Address&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;Property&lt;Address&gt;: Encode,<br>&nbsp;&nbsp;&nbsp;&nbsp;Property&lt;Address&gt;: Encode,&nbsp;</span>","synthetic":false,"types":[]},{"text":"impl Encode for BaseAtomicPredicateCallInputs","synthetic":false,"types":[]},{"text":"impl&lt;Address&gt; Encode for CompiledPredicateCallInputs&lt;Address&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;Property&lt;Address&gt;: Encode,<br>&nbsp;&nbsp;&nbsp;&nbsp;Property&lt;Address&gt;: Encode,&nbsp;</span>","synthetic":false,"types":[]},{"text":"impl&lt;Address&gt; Encode for Property&lt;Address&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;Address: Encode,<br>&nbsp;&nbsp;&nbsp;&nbsp;Address: Encode,&nbsp;</span>","synthetic":false,"types":[]},{"text":"impl Encode for PredicateTypeSerializable","synthetic":false,"types":[]},{"text":"impl Encode for VarTypeSerializable","synthetic":false,"types":[]},{"text":"impl Encode for CompiledPredicateSerializable","synthetic":false,"types":[]},{"text":"impl Encode for ConstantVariableSerializable","synthetic":false,"types":[]},{"text":"impl Encode for IntermediateCompiledPredicateSerializable","synthetic":false,"types":[]},{"text":"impl Encode for AtomicPropositionOrPlaceholderSerializable","synthetic":false,"types":[]},{"text":"impl Encode for AtomicPropositionSerializable","synthetic":false,"types":[]},{"text":"impl Encode for PredicateCallSerializable","synthetic":false,"types":[]},{"text":"impl Encode for AtomicPredicateCallSerializable","synthetic":false,"types":[]},{"text":"impl Encode for InputPredicateCallSerializable","synthetic":false,"types":[]},{"text":"impl Encode for VariablePredicateCallSerializable","synthetic":false,"types":[]},{"text":"impl Encode for CompiledPredicateCallSerializable","synthetic":false,"types":[]},{"text":"impl Encode for CompiledInputSerializable","synthetic":false,"types":[]},{"text":"impl Encode for ConstantInputSerializable","synthetic":false,"types":[]},{"text":"impl Encode for LabelInputSerializable","synthetic":false,"types":[]},{"text":"impl Encode for NormalInputSerializable","synthetic":false,"types":[]},{"text":"impl Encode for VariableInputSerializable","synthetic":false,"types":[]},{"text":"impl Encode for SelfInputSerializable","synthetic":false,"types":[]},{"text":"impl Encode for LogicalConnectiveSerializable","synthetic":false,"types":[]},{"text":"impl&lt;Address&gt; Encode for VarValue&lt;Address&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;Address: Encode,<br>&nbsp;&nbsp;&nbsp;&nbsp;Address: Encode,&nbsp;</span>","synthetic":false,"types":[]},{"text":"impl Encode for AccountId","synthetic":false,"types":[]},{"text":"impl Encode for Range","synthetic":false,"types":[]}];
implementors["pallet_contract_operator"] = [{"text":"impl Encode for DefaultParameters","synthetic":false,"types":[]},{"text":"impl&lt;T:&nbsp;Trait&gt; Encode for Call&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;CodeHash&lt;T&gt;: Encode,<br>&nbsp;&nbsp;&nbsp;&nbsp;CodeHash&lt;T&gt;: Encode,<br>&nbsp;&nbsp;&nbsp;&nbsp;T::Parameters: Encode,<br>&nbsp;&nbsp;&nbsp;&nbsp;T::Parameters: Encode,<br>&nbsp;&nbsp;&nbsp;&nbsp;T::AccountId: Encode,<br>&nbsp;&nbsp;&nbsp;&nbsp;T::AccountId: Encode,<br>&nbsp;&nbsp;&nbsp;&nbsp;T::Parameters: Encode,<br>&nbsp;&nbsp;&nbsp;&nbsp;T::Parameters: Encode,<br>&nbsp;&nbsp;&nbsp;&nbsp;Vec&lt;T::AccountId&gt;: Encode,<br>&nbsp;&nbsp;&nbsp;&nbsp;Vec&lt;T::AccountId&gt;: Encode,<br>&nbsp;&nbsp;&nbsp;&nbsp;T::AccountId: Encode,<br>&nbsp;&nbsp;&nbsp;&nbsp;T::AccountId: Encode,<br>&nbsp;&nbsp;&nbsp;&nbsp;BalanceOf&lt;T&gt;: HasCompact,&nbsp;</span>","synthetic":false,"types":[]},{"text":"impl&lt;AccountId, Parameters&gt; Encode for RawEvent&lt;AccountId, Parameters&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;AccountId: Encode,<br>&nbsp;&nbsp;&nbsp;&nbsp;AccountId: Encode,<br>&nbsp;&nbsp;&nbsp;&nbsp;AccountId: Encode,<br>&nbsp;&nbsp;&nbsp;&nbsp;AccountId: Encode,<br>&nbsp;&nbsp;&nbsp;&nbsp;AccountId: Encode,<br>&nbsp;&nbsp;&nbsp;&nbsp;AccountId: Encode,<br>&nbsp;&nbsp;&nbsp;&nbsp;Parameters: Encode,<br>&nbsp;&nbsp;&nbsp;&nbsp;Parameters: Encode,&nbsp;</span>","synthetic":false,"types":[]}];
implementors["pallet_custom_signatures"] = [{"text":"impl Encode for EthereumSignature","synthetic":false,"types":[]},{"text":"impl&lt;AccountId&gt; Encode for RawEvent&lt;AccountId&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;AccountId: Encode,<br>&nbsp;&nbsp;&nbsp;&nbsp;AccountId: Encode,&nbsp;</span>","synthetic":false,"types":[]},{"text":"impl&lt;T:&nbsp;Trait&gt; Encode for Call&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;Box&lt;&lt;T as Trait&gt;::Call&gt;: Encode,<br>&nbsp;&nbsp;&nbsp;&nbsp;Box&lt;&lt;T as Trait&gt;::Call&gt;: Encode,<br>&nbsp;&nbsp;&nbsp;&nbsp;T::AccountId: Encode,<br>&nbsp;&nbsp;&nbsp;&nbsp;T::AccountId: Encode,&nbsp;</span>","synthetic":false,"types":[]}];
implementors["pallet_dapps_staking"] = [{"text":"impl Encode for StakingParameters","synthetic":false,"types":[]},{"text":"impl&lt;AccountId, Balance&gt; Encode for Nominations&lt;AccountId, Balance&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;Vec&lt;(AccountId, Balance)&gt;: Encode,<br>&nbsp;&nbsp;&nbsp;&nbsp;Vec&lt;(AccountId, Balance)&gt;: Encode,&nbsp;</span>","synthetic":false,"types":[]},{"text":"impl&lt;AccountId:&nbsp;Ord, Balance:&nbsp;HasCompact&gt; Encode for EraStakingPoints&lt;AccountId, Balance&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;Balance: Encode,<br>&nbsp;&nbsp;&nbsp;&nbsp;Balance: Encode,<br>&nbsp;&nbsp;&nbsp;&nbsp;BTreeMap&lt;AccountId, Balance&gt;: Encode,<br>&nbsp;&nbsp;&nbsp;&nbsp;BTreeMap&lt;AccountId, Balance&gt;: Encode,&nbsp;</span>","synthetic":false,"types":[]},{"text":"impl&lt;Balance:&nbsp;HasCompact&gt; Encode for UnlockChunk&lt;Balance&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;Balance: HasCompact,&nbsp;</span>","synthetic":false,"types":[]},{"text":"impl&lt;AccountId, Balance:&nbsp;HasCompact&gt; Encode for StakingLedger&lt;AccountId, Balance&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;AccountId: Encode,<br>&nbsp;&nbsp;&nbsp;&nbsp;AccountId: Encode,<br>&nbsp;&nbsp;&nbsp;&nbsp;Vec&lt;UnlockChunk&lt;Balance&gt;&gt;: Encode,<br>&nbsp;&nbsp;&nbsp;&nbsp;Vec&lt;UnlockChunk&lt;Balance&gt;&gt;: Encode,<br>&nbsp;&nbsp;&nbsp;&nbsp;Balance: HasCompact,<br>&nbsp;&nbsp;&nbsp;&nbsp;Balance: HasCompact,&nbsp;</span>","synthetic":false,"types":[]},{"text":"impl Encode for Vote","synthetic":false,"types":[]},{"text":"impl Encode for VoteCounts","synthetic":false,"types":[]},{"text":"impl&lt;AccountId, Balance&gt; Encode for RawEvent&lt;AccountId, Balance&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;Balance: Encode,<br>&nbsp;&nbsp;&nbsp;&nbsp;Balance: Encode,<br>&nbsp;&nbsp;&nbsp;&nbsp;Balance: Encode,<br>&nbsp;&nbsp;&nbsp;&nbsp;Balance: Encode,<br>&nbsp;&nbsp;&nbsp;&nbsp;AccountId: Encode,<br>&nbsp;&nbsp;&nbsp;&nbsp;AccountId: Encode,<br>&nbsp;&nbsp;&nbsp;&nbsp;Balance: Encode,<br>&nbsp;&nbsp;&nbsp;&nbsp;Balance: Encode,<br>&nbsp;&nbsp;&nbsp;&nbsp;AccountId: Encode,<br>&nbsp;&nbsp;&nbsp;&nbsp;AccountId: Encode,<br>&nbsp;&nbsp;&nbsp;&nbsp;Balance: Encode,<br>&nbsp;&nbsp;&nbsp;&nbsp;Balance: Encode,<br>&nbsp;&nbsp;&nbsp;&nbsp;AccountId: Encode,<br>&nbsp;&nbsp;&nbsp;&nbsp;AccountId: Encode,<br>&nbsp;&nbsp;&nbsp;&nbsp;Balance: Encode,<br>&nbsp;&nbsp;&nbsp;&nbsp;Balance: Encode,<br>&nbsp;&nbsp;&nbsp;&nbsp;Balance: Encode,<br>&nbsp;&nbsp;&nbsp;&nbsp;Balance: Encode,<br>&nbsp;&nbsp;&nbsp;&nbsp;AccountId: Encode,<br>&nbsp;&nbsp;&nbsp;&nbsp;AccountId: Encode,&nbsp;</span>","synthetic":false,"types":[]},{"text":"impl&lt;T:&nbsp;Trait&gt; Encode for Call&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;T::Lookup as StaticLookup&gt;::Source: Encode,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;T::Lookup as StaticLookup&gt;::Source: Encode,<br>&nbsp;&nbsp;&nbsp;&nbsp;RewardDestination&lt;T::AccountId&gt;: Encode,<br>&nbsp;&nbsp;&nbsp;&nbsp;RewardDestination&lt;T::AccountId&gt;: Encode,<br>&nbsp;&nbsp;&nbsp;&nbsp;Vec&lt;(&lt;T::Lookup as StaticLookup&gt;::Source, BalanceOf&lt;T&gt;)&gt;: Encode,<br>&nbsp;&nbsp;&nbsp;&nbsp;Vec&lt;(&lt;T::Lookup as StaticLookup&gt;::Source, BalanceOf&lt;T&gt;)&gt;: Encode,<br>&nbsp;&nbsp;&nbsp;&nbsp;Vec&lt;(&lt;T::Lookup as StaticLookup&gt;::Source, Vote)&gt;: Encode,<br>&nbsp;&nbsp;&nbsp;&nbsp;Vec&lt;(&lt;T::Lookup as StaticLookup&gt;::Source, Vote)&gt;: Encode,<br>&nbsp;&nbsp;&nbsp;&nbsp;RewardDestination&lt;T::AccountId&gt;: Encode,<br>&nbsp;&nbsp;&nbsp;&nbsp;RewardDestination&lt;T::AccountId&gt;: Encode,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;T::Lookup as StaticLookup&gt;::Source: Encode,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;T::Lookup as StaticLookup&gt;::Source: Encode,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;T::Lookup as StaticLookup&gt;::Source: Encode,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;T::Lookup as StaticLookup&gt;::Source: Encode,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;T::Lookup as StaticLookup&gt;::Source: Encode,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;T::Lookup as StaticLookup&gt;::Source: Encode,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;T::Lookup as StaticLookup&gt;::Source: Encode,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;T::Lookup as StaticLookup&gt;::Source: Encode,<br>&nbsp;&nbsp;&nbsp;&nbsp;BalanceOf&lt;T&gt;: HasCompact,<br>&nbsp;&nbsp;&nbsp;&nbsp;BalanceOf&lt;T&gt;: HasCompact,<br>&nbsp;&nbsp;&nbsp;&nbsp;BalanceOf&lt;T&gt;: HasCompact,&nbsp;</span>","synthetic":false,"types":[]}];
implementors["pallet_operator_trading"] = [{"text":"impl Encode for OfferState","synthetic":false,"types":[]},{"text":"impl&lt;AccountId, Balance, Moment&gt; Encode for Offer&lt;AccountId, Balance, Moment&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;AccountId: Encode,<br>&nbsp;&nbsp;&nbsp;&nbsp;AccountId: Encode,<br>&nbsp;&nbsp;&nbsp;&nbsp;AccountId: Encode,<br>&nbsp;&nbsp;&nbsp;&nbsp;AccountId: Encode,<br>&nbsp;&nbsp;&nbsp;&nbsp;Vec&lt;AccountId&gt;: Encode,<br>&nbsp;&nbsp;&nbsp;&nbsp;Vec&lt;AccountId&gt;: Encode,<br>&nbsp;&nbsp;&nbsp;&nbsp;Balance: Encode,<br>&nbsp;&nbsp;&nbsp;&nbsp;Balance: Encode,<br>&nbsp;&nbsp;&nbsp;&nbsp;Moment: Encode,<br>&nbsp;&nbsp;&nbsp;&nbsp;Moment: Encode,&nbsp;</span>","synthetic":false,"types":[]},{"text":"impl&lt;T:&nbsp;Trait&gt; Encode for Call&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T::AccountId: Encode,<br>&nbsp;&nbsp;&nbsp;&nbsp;T::AccountId: Encode,<br>&nbsp;&nbsp;&nbsp;&nbsp;Vec&lt;T::AccountId&gt;: Encode,<br>&nbsp;&nbsp;&nbsp;&nbsp;Vec&lt;T::AccountId&gt;: Encode,<br>&nbsp;&nbsp;&nbsp;&nbsp;BalanceOf&lt;T&gt;: Encode,<br>&nbsp;&nbsp;&nbsp;&nbsp;BalanceOf&lt;T&gt;: Encode,<br>&nbsp;&nbsp;&nbsp;&nbsp;T::BlockNumber: Encode,<br>&nbsp;&nbsp;&nbsp;&nbsp;T::BlockNumber: Encode,<br>&nbsp;&nbsp;&nbsp;&nbsp;T::AccountId: Encode,<br>&nbsp;&nbsp;&nbsp;&nbsp;T::AccountId: Encode,<br>&nbsp;&nbsp;&nbsp;&nbsp;T::AccountId: Encode,<br>&nbsp;&nbsp;&nbsp;&nbsp;T::AccountId: Encode,&nbsp;</span>","synthetic":false,"types":[]},{"text":"impl&lt;AccountId&gt; Encode for RawEvent&lt;AccountId&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;AccountId: Encode,<br>&nbsp;&nbsp;&nbsp;&nbsp;AccountId: Encode,<br>&nbsp;&nbsp;&nbsp;&nbsp;AccountId: Encode,<br>&nbsp;&nbsp;&nbsp;&nbsp;AccountId: Encode,<br>&nbsp;&nbsp;&nbsp;&nbsp;AccountId: Encode,<br>&nbsp;&nbsp;&nbsp;&nbsp;AccountId: Encode,<br>&nbsp;&nbsp;&nbsp;&nbsp;AccountId: Encode,<br>&nbsp;&nbsp;&nbsp;&nbsp;AccountId: Encode,<br>&nbsp;&nbsp;&nbsp;&nbsp;AccountId: Encode,<br>&nbsp;&nbsp;&nbsp;&nbsp;AccountId: Encode,<br>&nbsp;&nbsp;&nbsp;&nbsp;AccountId: Encode,<br>&nbsp;&nbsp;&nbsp;&nbsp;AccountId: Encode,<br>&nbsp;&nbsp;&nbsp;&nbsp;AccountId: Encode,<br>&nbsp;&nbsp;&nbsp;&nbsp;AccountId: Encode,&nbsp;</span>","synthetic":false,"types":[]}];
implementors["pallet_ovm"] = [{"text":"impl Encode for PrefabOvmModule","synthetic":false,"types":[]},{"text":"impl&lt;CodeHash&gt; Encode for PredicateContract&lt;CodeHash&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;CodeHash: Encode,<br>&nbsp;&nbsp;&nbsp;&nbsp;CodeHash: Encode,&nbsp;</span>","synthetic":false,"types":[]},{"text":"impl&lt;AccountId&gt; Encode for Property&lt;AccountId&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;AccountId: Encode,<br>&nbsp;&nbsp;&nbsp;&nbsp;AccountId: Encode,&nbsp;</span>","synthetic":false,"types":[]},{"text":"impl Encode for Decision","synthetic":false,"types":[]},{"text":"impl&lt;Hash, BlockNumber&gt; Encode for ChallengeGame&lt;Hash, BlockNumber&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;Hash: Encode,<br>&nbsp;&nbsp;&nbsp;&nbsp;Hash: Encode,<br>&nbsp;&nbsp;&nbsp;&nbsp;Vec&lt;Hash&gt;: Encode,<br>&nbsp;&nbsp;&nbsp;&nbsp;Vec&lt;Hash&gt;: Encode,<br>&nbsp;&nbsp;&nbsp;&nbsp;BlockNumber: Encode,<br>&nbsp;&nbsp;&nbsp;&nbsp;BlockNumber: Encode,&nbsp;</span>","synthetic":false,"types":[]},{"text":"impl Encode for Schedule","synthetic":false,"types":[]},{"text":"impl&lt;AccountId, Property, Hash, BlockNumber&gt; Encode for RawEvent&lt;AccountId, Property, Hash, BlockNumber&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;Hash: Encode,<br>&nbsp;&nbsp;&nbsp;&nbsp;Hash: Encode,<br>&nbsp;&nbsp;&nbsp;&nbsp;AccountId: Encode,<br>&nbsp;&nbsp;&nbsp;&nbsp;AccountId: Encode,<br>&nbsp;&nbsp;&nbsp;&nbsp;Hash: Encode,<br>&nbsp;&nbsp;&nbsp;&nbsp;Hash: Encode,<br>&nbsp;&nbsp;&nbsp;&nbsp;Property: Encode,<br>&nbsp;&nbsp;&nbsp;&nbsp;Property: Encode,<br>&nbsp;&nbsp;&nbsp;&nbsp;BlockNumber: Encode,<br>&nbsp;&nbsp;&nbsp;&nbsp;BlockNumber: Encode,<br>&nbsp;&nbsp;&nbsp;&nbsp;Hash: Encode,<br>&nbsp;&nbsp;&nbsp;&nbsp;Hash: Encode,<br>&nbsp;&nbsp;&nbsp;&nbsp;Hash: Encode,<br>&nbsp;&nbsp;&nbsp;&nbsp;Hash: Encode,<br>&nbsp;&nbsp;&nbsp;&nbsp;Hash: Encode,<br>&nbsp;&nbsp;&nbsp;&nbsp;Hash: Encode,<br>&nbsp;&nbsp;&nbsp;&nbsp;Hash: Encode,<br>&nbsp;&nbsp;&nbsp;&nbsp;Hash: Encode,<br>&nbsp;&nbsp;&nbsp;&nbsp;Hash: Encode,<br>&nbsp;&nbsp;&nbsp;&nbsp;Hash: Encode,&nbsp;</span>","synthetic":false,"types":[]},{"text":"impl&lt;T:&nbsp;Trait&gt; Encode for Call&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;T as Trait&gt;::Hash: Encode,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;T as Trait&gt;::Hash: Encode,<br>&nbsp;&nbsp;&nbsp;&nbsp;PropertyOf&lt;T&gt;: Encode,<br>&nbsp;&nbsp;&nbsp;&nbsp;PropertyOf&lt;T&gt;: Encode,<br>&nbsp;&nbsp;&nbsp;&nbsp;PropertyOf&lt;T&gt;: Encode,<br>&nbsp;&nbsp;&nbsp;&nbsp;PropertyOf&lt;T&gt;: Encode,<br>&nbsp;&nbsp;&nbsp;&nbsp;PropertyOf&lt;T&gt;: Encode,<br>&nbsp;&nbsp;&nbsp;&nbsp;PropertyOf&lt;T&gt;: Encode,<br>&nbsp;&nbsp;&nbsp;&nbsp;PropertyOf&lt;T&gt;: Encode,<br>&nbsp;&nbsp;&nbsp;&nbsp;PropertyOf&lt;T&gt;: Encode,<br>&nbsp;&nbsp;&nbsp;&nbsp;PropertyOf&lt;T&gt;: Encode,<br>&nbsp;&nbsp;&nbsp;&nbsp;PropertyOf&lt;T&gt;: Encode,<br>&nbsp;&nbsp;&nbsp;&nbsp;PropertyOf&lt;T&gt;: Encode,<br>&nbsp;&nbsp;&nbsp;&nbsp;PropertyOf&lt;T&gt;: Encode,<br>&nbsp;&nbsp;&nbsp;&nbsp;PropertyOf&lt;T&gt;: Encode,<br>&nbsp;&nbsp;&nbsp;&nbsp;PropertyOf&lt;T&gt;: Encode,&nbsp;</span>","synthetic":false,"types":[]}];
implementors["pallet_plasm_lockdrop"] = [{"text":"impl Encode for LockCheck","synthetic":false,"types":[]},{"text":"impl Encode for EcdsaSignature","synthetic":false,"types":[]},{"text":"impl Encode for Lockdrop","synthetic":false,"types":[]},{"text":"impl&lt;AuthorityId:&nbsp;Ord&gt; Encode for Claim&lt;AuthorityId&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;BTreeSet&lt;AuthorityId&gt;: Encode,<br>&nbsp;&nbsp;&nbsp;&nbsp;BTreeSet&lt;AuthorityId&gt;: Encode,<br>&nbsp;&nbsp;&nbsp;&nbsp;BTreeSet&lt;AuthorityId&gt;: Encode,<br>&nbsp;&nbsp;&nbsp;&nbsp;BTreeSet&lt;AuthorityId&gt;: Encode,&nbsp;</span>","synthetic":false,"types":[]},{"text":"impl Encode for ClaimVote","synthetic":false,"types":[]},{"text":"impl&lt;DollarRate:&nbsp;Member + Parameter&gt; Encode for TickerRate&lt;DollarRate&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;DollarRate: Encode,<br>&nbsp;&nbsp;&nbsp;&nbsp;DollarRate: Encode,<br>&nbsp;&nbsp;&nbsp;&nbsp;DollarRate: Encode,<br>&nbsp;&nbsp;&nbsp;&nbsp;DollarRate: Encode,&nbsp;</span>","synthetic":false,"types":[]},{"text":"impl&lt;AccountId, AuthorityId, DollarRate, Balance&gt; Encode for RawEvent&lt;AccountId, AuthorityId, DollarRate, Balance&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;AuthorityId: Encode,<br>&nbsp;&nbsp;&nbsp;&nbsp;AuthorityId: Encode,<br>&nbsp;&nbsp;&nbsp;&nbsp;AccountId: Encode,<br>&nbsp;&nbsp;&nbsp;&nbsp;AccountId: Encode,<br>&nbsp;&nbsp;&nbsp;&nbsp;Balance: Encode,<br>&nbsp;&nbsp;&nbsp;&nbsp;Balance: Encode,<br>&nbsp;&nbsp;&nbsp;&nbsp;DollarRate: Encode,<br>&nbsp;&nbsp;&nbsp;&nbsp;DollarRate: Encode,<br>&nbsp;&nbsp;&nbsp;&nbsp;DollarRate: Encode,<br>&nbsp;&nbsp;&nbsp;&nbsp;DollarRate: Encode,<br>&nbsp;&nbsp;&nbsp;&nbsp;Vec&lt;AuthorityId&gt;: Encode,<br>&nbsp;&nbsp;&nbsp;&nbsp;Vec&lt;AuthorityId&gt;: Encode,&nbsp;</span>","synthetic":false,"types":[]},{"text":"impl&lt;T:&nbsp;Trait&gt; Encode for Call&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T::AccountId: Encode,<br>&nbsp;&nbsp;&nbsp;&nbsp;T::AccountId: Encode,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;T::AuthorityId as RuntimeAppPublic&gt;::Signature: Encode,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;T::AuthorityId as RuntimeAppPublic&gt;::Signature: Encode,<br>&nbsp;&nbsp;&nbsp;&nbsp;TickerRate&lt;T::DollarRate&gt;: Encode,<br>&nbsp;&nbsp;&nbsp;&nbsp;TickerRate&lt;T::DollarRate&gt;: Encode,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;T::AuthorityId as RuntimeAppPublic&gt;::Signature: Encode,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;T::AuthorityId as RuntimeAppPublic&gt;::Signature: Encode,<br>&nbsp;&nbsp;&nbsp;&nbsp;T::BlockNumber: Encode,<br>&nbsp;&nbsp;&nbsp;&nbsp;T::BlockNumber: Encode,<br>&nbsp;&nbsp;&nbsp;&nbsp;T::BlockNumber: Encode,<br>&nbsp;&nbsp;&nbsp;&nbsp;T::BlockNumber: Encode,<br>&nbsp;&nbsp;&nbsp;&nbsp;Vec&lt;T::AuthorityId&gt;: Encode,<br>&nbsp;&nbsp;&nbsp;&nbsp;Vec&lt;T::AuthorityId&gt;: Encode,&nbsp;</span>","synthetic":false,"types":[]}];
implementors["pallet_plasm_rewards"] = [{"text":"impl Encode for Releases","synthetic":false,"types":[]},{"text":"impl&lt;Moment&gt; Encode for ActiveEraInfo&lt;Moment&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;Option&lt;Moment&gt;: Encode,<br>&nbsp;&nbsp;&nbsp;&nbsp;Option&lt;Moment&gt;: Encode,&nbsp;</span>","synthetic":false,"types":[]},{"text":"impl&lt;Balance&gt; Encode for RawEvent&lt;Balance&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;Balance: Encode,<br>&nbsp;&nbsp;&nbsp;&nbsp;Balance: Encode,&nbsp;</span>","synthetic":false,"types":[]},{"text":"impl&lt;T:&nbsp;Trait&gt; Encode for Call&lt;T&gt;","synthetic":false,"types":[]}];
implementors["pallet_plasm_validator"] = [{"text":"impl&lt;T:&nbsp;Trait&gt; Encode for Call&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;Vec&lt;T::AccountId&gt;: Encode,<br>&nbsp;&nbsp;&nbsp;&nbsp;Vec&lt;T::AccountId&gt;: Encode,&nbsp;</span>","synthetic":false,"types":[]},{"text":"impl&lt;AccountId, Balance&gt; Encode for RawEvent&lt;AccountId, Balance&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;Vec&lt;AccountId&gt;: Encode,<br>&nbsp;&nbsp;&nbsp;&nbsp;Vec&lt;AccountId&gt;: Encode,<br>&nbsp;&nbsp;&nbsp;&nbsp;AccountId: Encode,<br>&nbsp;&nbsp;&nbsp;&nbsp;AccountId: Encode,<br>&nbsp;&nbsp;&nbsp;&nbsp;Balance: Encode,<br>&nbsp;&nbsp;&nbsp;&nbsp;Balance: Encode,<br>&nbsp;&nbsp;&nbsp;&nbsp;Balance: Encode,<br>&nbsp;&nbsp;&nbsp;&nbsp;Balance: Encode,&nbsp;</span>","synthetic":false,"types":[]}];
implementors["pallet_plasma"] = [{"text":"impl&lt;Balance&gt; Encode for Range&lt;Balance&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;Balance: Encode,<br>&nbsp;&nbsp;&nbsp;&nbsp;Balance: Encode,<br>&nbsp;&nbsp;&nbsp;&nbsp;Balance: Encode,<br>&nbsp;&nbsp;&nbsp;&nbsp;Balance: Encode,&nbsp;</span>","synthetic":false,"types":[]},{"text":"impl&lt;AccountId, Balance, BlockNumber&gt; Encode for StateUpdate&lt;AccountId, Balance, BlockNumber&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;AccountId: Encode,<br>&nbsp;&nbsp;&nbsp;&nbsp;AccountId: Encode,<br>&nbsp;&nbsp;&nbsp;&nbsp;Range&lt;Balance&gt;: Encode,<br>&nbsp;&nbsp;&nbsp;&nbsp;Range&lt;Balance&gt;: Encode,<br>&nbsp;&nbsp;&nbsp;&nbsp;BlockNumber: Encode,<br>&nbsp;&nbsp;&nbsp;&nbsp;BlockNumber: Encode,<br>&nbsp;&nbsp;&nbsp;&nbsp;Property&lt;AccountId&gt;: Encode,<br>&nbsp;&nbsp;&nbsp;&nbsp;Property&lt;AccountId&gt;: Encode,&nbsp;</span>","synthetic":false,"types":[]},{"text":"impl&lt;AccountId&gt; Encode for Checkpoint&lt;AccountId&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;Property&lt;AccountId&gt;: Encode,<br>&nbsp;&nbsp;&nbsp;&nbsp;Property&lt;AccountId&gt;: Encode,&nbsp;</span>","synthetic":false,"types":[]},{"text":"impl&lt;AccountId, BlockNumber, Balance, Hash&gt; Encode for Exit&lt;AccountId, BlockNumber, Balance, Hash&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;StateUpdate&lt;AccountId, Balance, BlockNumber&gt;: Encode,<br>&nbsp;&nbsp;&nbsp;&nbsp;StateUpdate&lt;AccountId, Balance, BlockNumber&gt;: Encode,<br>&nbsp;&nbsp;&nbsp;&nbsp;InclusionProof&lt;AccountId, Balance, Hash&gt;: Encode,<br>&nbsp;&nbsp;&nbsp;&nbsp;InclusionProof&lt;AccountId, Balance, Hash&gt;: Encode,&nbsp;</span>","synthetic":false,"types":[]},{"text":"impl&lt;AccountId, Balance, Hash&gt; Encode for InclusionProof&lt;AccountId, Balance, Hash&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;AddressInclusionProof&lt;AccountId, Balance, Hash&gt;: Encode,<br>&nbsp;&nbsp;&nbsp;&nbsp;AddressInclusionProof&lt;AccountId, Balance, Hash&gt;: Encode,<br>&nbsp;&nbsp;&nbsp;&nbsp;IntervalInclusionProof&lt;Balance, Hash&gt;: Encode,<br>&nbsp;&nbsp;&nbsp;&nbsp;IntervalInclusionProof&lt;Balance, Hash&gt;: Encode,&nbsp;</span>","synthetic":false,"types":[]},{"text":"impl&lt;Balance, Hash&gt; Encode for IntervalInclusionProof&lt;Balance, Hash&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;Balance: Encode,<br>&nbsp;&nbsp;&nbsp;&nbsp;Balance: Encode,<br>&nbsp;&nbsp;&nbsp;&nbsp;Balance: Encode,<br>&nbsp;&nbsp;&nbsp;&nbsp;Balance: Encode,<br>&nbsp;&nbsp;&nbsp;&nbsp;Vec&lt;IntervalTreeNode&lt;Balance, Hash&gt;&gt;: Encode,<br>&nbsp;&nbsp;&nbsp;&nbsp;Vec&lt;IntervalTreeNode&lt;Balance, Hash&gt;&gt;: Encode,&nbsp;</span>","synthetic":false,"types":[]},{"text":"impl&lt;AccountId, Balance, Hash&gt; Encode for AddressInclusionProof&lt;AccountId, Balance, Hash&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;AccountId: Encode,<br>&nbsp;&nbsp;&nbsp;&nbsp;AccountId: Encode,<br>&nbsp;&nbsp;&nbsp;&nbsp;Balance: Encode,<br>&nbsp;&nbsp;&nbsp;&nbsp;Balance: Encode,<br>&nbsp;&nbsp;&nbsp;&nbsp;Vec&lt;AddressTreeNode&lt;AccountId, Hash&gt;&gt;: Encode,<br>&nbsp;&nbsp;&nbsp;&nbsp;Vec&lt;AddressTreeNode&lt;AccountId, Hash&gt;&gt;: Encode,&nbsp;</span>","synthetic":false,"types":[]},{"text":"impl&lt;Balance, Hash&gt; Encode for IntervalTreeNode&lt;Balance, Hash&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;Hash: Encode,<br>&nbsp;&nbsp;&nbsp;&nbsp;Hash: Encode,<br>&nbsp;&nbsp;&nbsp;&nbsp;Balance: Encode,<br>&nbsp;&nbsp;&nbsp;&nbsp;Balance: Encode,&nbsp;</span>","synthetic":false,"types":[]},{"text":"impl&lt;AccountId, Hash&gt; Encode for AddressTreeNode&lt;AccountId, Hash&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;Hash: Encode,<br>&nbsp;&nbsp;&nbsp;&nbsp;Hash: Encode,<br>&nbsp;&nbsp;&nbsp;&nbsp;AccountId: Encode,<br>&nbsp;&nbsp;&nbsp;&nbsp;AccountId: Encode,&nbsp;</span>","synthetic":false,"types":[]},{"text":"impl&lt;AccountId, Balance, BlockNumber&gt; Encode for ExitDeposit&lt;AccountId, Balance, BlockNumber&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;StateUpdate&lt;AccountId, Balance, BlockNumber&gt;: Encode,<br>&nbsp;&nbsp;&nbsp;&nbsp;StateUpdate&lt;AccountId, Balance, BlockNumber&gt;: Encode,<br>&nbsp;&nbsp;&nbsp;&nbsp;Checkpoint&lt;AccountId&gt;: Encode,<br>&nbsp;&nbsp;&nbsp;&nbsp;Checkpoint&lt;AccountId&gt;: Encode,&nbsp;</span>","synthetic":false,"types":[]},{"text":"impl&lt;AccountId, Hash, BlockNumber, Range, Checkpoint&gt; Encode for RawEvent&lt;AccountId, Hash, BlockNumber, Range, Checkpoint&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;AccountId: Encode,<br>&nbsp;&nbsp;&nbsp;&nbsp;AccountId: Encode,<br>&nbsp;&nbsp;&nbsp;&nbsp;AccountId: Encode,<br>&nbsp;&nbsp;&nbsp;&nbsp;AccountId: Encode,<br>&nbsp;&nbsp;&nbsp;&nbsp;AccountId: Encode,<br>&nbsp;&nbsp;&nbsp;&nbsp;AccountId: Encode,<br>&nbsp;&nbsp;&nbsp;&nbsp;BlockNumber: Encode,<br>&nbsp;&nbsp;&nbsp;&nbsp;BlockNumber: Encode,<br>&nbsp;&nbsp;&nbsp;&nbsp;Hash: Encode,<br>&nbsp;&nbsp;&nbsp;&nbsp;Hash: Encode,<br>&nbsp;&nbsp;&nbsp;&nbsp;AccountId: Encode,<br>&nbsp;&nbsp;&nbsp;&nbsp;AccountId: Encode,<br>&nbsp;&nbsp;&nbsp;&nbsp;Hash: Encode,<br>&nbsp;&nbsp;&nbsp;&nbsp;Hash: Encode,<br>&nbsp;&nbsp;&nbsp;&nbsp;Checkpoint: Encode,<br>&nbsp;&nbsp;&nbsp;&nbsp;Checkpoint: Encode,<br>&nbsp;&nbsp;&nbsp;&nbsp;AccountId: Encode,<br>&nbsp;&nbsp;&nbsp;&nbsp;AccountId: Encode,<br>&nbsp;&nbsp;&nbsp;&nbsp;Hash: Encode,<br>&nbsp;&nbsp;&nbsp;&nbsp;Hash: Encode,<br>&nbsp;&nbsp;&nbsp;&nbsp;AccountId: Encode,<br>&nbsp;&nbsp;&nbsp;&nbsp;AccountId: Encode,<br>&nbsp;&nbsp;&nbsp;&nbsp;Range: Encode,<br>&nbsp;&nbsp;&nbsp;&nbsp;Range: Encode,<br>&nbsp;&nbsp;&nbsp;&nbsp;AccountId: Encode,<br>&nbsp;&nbsp;&nbsp;&nbsp;AccountId: Encode,<br>&nbsp;&nbsp;&nbsp;&nbsp;Range: Encode,<br>&nbsp;&nbsp;&nbsp;&nbsp;Range: Encode,&nbsp;</span>","synthetic":false,"types":[]},{"text":"impl&lt;T:&nbsp;Trait&gt; Encode for Call&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T::AccountId: Encode,<br>&nbsp;&nbsp;&nbsp;&nbsp;T::AccountId: Encode,<br>&nbsp;&nbsp;&nbsp;&nbsp;T::AccountId: Encode,<br>&nbsp;&nbsp;&nbsp;&nbsp;T::AccountId: Encode,<br>&nbsp;&nbsp;&nbsp;&nbsp;T::AccountId: Encode,<br>&nbsp;&nbsp;&nbsp;&nbsp;T::AccountId: Encode,<br>&nbsp;&nbsp;&nbsp;&nbsp;T::AccountId: Encode,<br>&nbsp;&nbsp;&nbsp;&nbsp;T::AccountId: Encode,<br>&nbsp;&nbsp;&nbsp;&nbsp;T::AccountId: Encode,<br>&nbsp;&nbsp;&nbsp;&nbsp;T::AccountId: Encode,<br>&nbsp;&nbsp;&nbsp;&nbsp;T::AccountId: Encode,<br>&nbsp;&nbsp;&nbsp;&nbsp;T::AccountId: Encode,<br>&nbsp;&nbsp;&nbsp;&nbsp;T::BlockNumber: Encode,<br>&nbsp;&nbsp;&nbsp;&nbsp;T::BlockNumber: Encode,<br>&nbsp;&nbsp;&nbsp;&nbsp;T::Hash: Encode,<br>&nbsp;&nbsp;&nbsp;&nbsp;T::Hash: Encode,<br>&nbsp;&nbsp;&nbsp;&nbsp;T::AccountId: Encode,<br>&nbsp;&nbsp;&nbsp;&nbsp;T::AccountId: Encode,<br>&nbsp;&nbsp;&nbsp;&nbsp;BalanceOf&lt;T&gt;: Encode,<br>&nbsp;&nbsp;&nbsp;&nbsp;BalanceOf&lt;T&gt;: Encode,<br>&nbsp;&nbsp;&nbsp;&nbsp;PropertyOf&lt;T&gt;: Encode,<br>&nbsp;&nbsp;&nbsp;&nbsp;PropertyOf&lt;T&gt;: Encode,<br>&nbsp;&nbsp;&nbsp;&nbsp;T::AccountId: Encode,<br>&nbsp;&nbsp;&nbsp;&nbsp;T::AccountId: Encode,<br>&nbsp;&nbsp;&nbsp;&nbsp;BalanceOf&lt;T&gt;: Encode,<br>&nbsp;&nbsp;&nbsp;&nbsp;BalanceOf&lt;T&gt;: Encode,<br>&nbsp;&nbsp;&nbsp;&nbsp;T::AccountId: Encode,<br>&nbsp;&nbsp;&nbsp;&nbsp;T::AccountId: Encode,<br>&nbsp;&nbsp;&nbsp;&nbsp;RangeOf&lt;T&gt;: Encode,<br>&nbsp;&nbsp;&nbsp;&nbsp;RangeOf&lt;T&gt;: Encode,<br>&nbsp;&nbsp;&nbsp;&nbsp;BalanceOf&lt;T&gt;: Encode,<br>&nbsp;&nbsp;&nbsp;&nbsp;BalanceOf&lt;T&gt;: Encode,<br>&nbsp;&nbsp;&nbsp;&nbsp;T::AccountId: Encode,<br>&nbsp;&nbsp;&nbsp;&nbsp;T::AccountId: Encode,<br>&nbsp;&nbsp;&nbsp;&nbsp;PropertyOf&lt;T&gt;: Encode,<br>&nbsp;&nbsp;&nbsp;&nbsp;PropertyOf&lt;T&gt;: Encode,<br>&nbsp;&nbsp;&nbsp;&nbsp;T::AccountId: Encode,<br>&nbsp;&nbsp;&nbsp;&nbsp;T::AccountId: Encode,<br>&nbsp;&nbsp;&nbsp;&nbsp;PropertyOf&lt;T&gt;: Encode,<br>&nbsp;&nbsp;&nbsp;&nbsp;PropertyOf&lt;T&gt;: Encode,<br>&nbsp;&nbsp;&nbsp;&nbsp;BalanceOf&lt;T&gt;: Encode,<br>&nbsp;&nbsp;&nbsp;&nbsp;BalanceOf&lt;T&gt;: Encode,<br>&nbsp;&nbsp;&nbsp;&nbsp;T::AccountId: Encode,<br>&nbsp;&nbsp;&nbsp;&nbsp;T::AccountId: Encode,&nbsp;</span>","synthetic":false,"types":[]}];
implementors["plasm_runtime"] = [{"text":"impl Encode for SessionKeys","synthetic":false,"types":[]},{"text":"impl Encode for Event","synthetic":false,"types":[]},{"text":"impl Encode for OriginCaller","synthetic":false,"types":[]},{"text":"impl Encode for Call","synthetic":false,"types":[]}];
if (window.register_implementors) {window.register_implementors(implementors);} else {window.pending_implementors = implementors;}})()