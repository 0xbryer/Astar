(function() {var implementors = {};
implementors["lockdrop_oracle"] = [{"text":"impl Debug for Config","synthetic":false,"types":[]}];
implementors["ovmi"] = [{"text":"impl Debug for PredicateType","synthetic":false,"types":[]},{"text":"impl Debug for VarType","synthetic":false,"types":[]},{"text":"impl Debug for CompiledPredicate","synthetic":false,"types":[]},{"text":"impl Debug for ConstantVariable","synthetic":false,"types":[]},{"text":"impl Debug for IntermediateCompiledPredicate","synthetic":false,"types":[]},{"text":"impl Debug for AtomicPropositionOrPlaceholder","synthetic":false,"types":[]},{"text":"impl Debug for AtomicProposition","synthetic":false,"types":[]},{"text":"impl Debug for PredicateCall","synthetic":false,"types":[]},{"text":"impl Debug for AtomicPredicateCall","synthetic":false,"types":[]},{"text":"impl Debug for InputPredicateCall","synthetic":false,"types":[]},{"text":"impl Debug for VariablePredicateCall","synthetic":false,"types":[]},{"text":"impl Debug for CompiledPredicateCall","synthetic":false,"types":[]},{"text":"impl Debug for CompiledInput","synthetic":false,"types":[]},{"text":"impl Debug for ConstantInput","synthetic":false,"types":[]},{"text":"impl Debug for LabelInput","synthetic":false,"types":[]},{"text":"impl Debug for NormalInput","synthetic":false,"types":[]},{"text":"impl Debug for VariableInput","synthetic":false,"types":[]},{"text":"impl Debug for SelfInput","synthetic":false,"types":[]},{"text":"impl Debug for LogicalConnective","synthetic":false,"types":[]},{"text":"impl&lt;Address:&nbsp;Debug&gt; Debug for ExecError&lt;Address&gt;","synthetic":false,"types":[]},{"text":"impl&lt;Address:&nbsp;Debug&gt; Debug for PredicateCallInputs&lt;Address&gt;","synthetic":false,"types":[]},{"text":"impl Debug for AtomicPredicateCallInputs","synthetic":false,"types":[]},{"text":"impl Debug for DecidablePredicateCallInputs","synthetic":false,"types":[]},{"text":"impl&lt;Address:&nbsp;Debug&gt; Debug for LogicalConnectiveCallInputs&lt;Address&gt;","synthetic":false,"types":[]},{"text":"impl Debug for BaseAtomicPredicateCallInputs","synthetic":false,"types":[]},{"text":"impl&lt;Address:&nbsp;Debug&gt; Debug for CompiledPredicateCallInputs&lt;Address&gt;","synthetic":false,"types":[]},{"text":"impl&lt;Address:&nbsp;Debug&gt; Debug for Property&lt;Address&gt;","synthetic":false,"types":[]},{"text":"impl Debug for PredicateTypeSerializable","synthetic":false,"types":[]},{"text":"impl Debug for VarTypeSerializable","synthetic":false,"types":[]},{"text":"impl Debug for CompiledPredicateSerializable","synthetic":false,"types":[]},{"text":"impl Debug for ConstantVariableSerializable","synthetic":false,"types":[]},{"text":"impl Debug for IntermediateCompiledPredicateSerializable","synthetic":false,"types":[]},{"text":"impl Debug for AtomicPropositionOrPlaceholderSerializable","synthetic":false,"types":[]},{"text":"impl Debug for AtomicPropositionSerializable","synthetic":false,"types":[]},{"text":"impl Debug for PredicateCallSerializable","synthetic":false,"types":[]},{"text":"impl Debug for AtomicPredicateCallSerializable","synthetic":false,"types":[]},{"text":"impl Debug for InputPredicateCallSerializable","synthetic":false,"types":[]},{"text":"impl Debug for VariablePredicateCallSerializable","synthetic":false,"types":[]},{"text":"impl Debug for CompiledPredicateCallSerializable","synthetic":false,"types":[]},{"text":"impl Debug for CompiledInputSerializable","synthetic":false,"types":[]},{"text":"impl Debug for ConstantInputSerializable","synthetic":false,"types":[]},{"text":"impl Debug for LabelInputSerializable","synthetic":false,"types":[]},{"text":"impl Debug for NormalInputSerializable","synthetic":false,"types":[]},{"text":"impl Debug for VariableInputSerializable","synthetic":false,"types":[]},{"text":"impl Debug for SelfInputSerializable","synthetic":false,"types":[]},{"text":"impl Debug for LogicalConnectiveSerializable","synthetic":false,"types":[]},{"text":"impl&lt;Address:&nbsp;Debug&gt; Debug for VarValue&lt;Address&gt;","synthetic":false,"types":[]}];
implementors["pallet_contract_operator"] = [{"text":"impl Debug for DefaultParameters","synthetic":false,"types":[]},{"text":"impl&lt;T:&nbsp;Trait&gt; Debug for Module&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Debug,&nbsp;</span>","synthetic":false,"types":[]},{"text":"impl&lt;T:&nbsp;Trait&gt; Debug for Call&lt;T&gt;","synthetic":false,"types":[]},{"text":"impl&lt;AccountId, Parameters&gt; Debug for RawEvent&lt;AccountId, Parameters&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;AccountId: Debug,<br>&nbsp;&nbsp;&nbsp;&nbsp;Parameters: Debug,&nbsp;</span>","synthetic":false,"types":[]}];
implementors["pallet_custom_signatures"] = [{"text":"impl Debug for EthereumSignature","synthetic":false,"types":[]},{"text":"impl&lt;T:&nbsp;Trait&gt; Debug for Error&lt;T&gt;","synthetic":false,"types":[]},{"text":"impl&lt;AccountId&gt; Debug for RawEvent&lt;AccountId&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;AccountId: Debug,&nbsp;</span>","synthetic":false,"types":[]},{"text":"impl&lt;T:&nbsp;Trait&gt; Debug for Module&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Debug,&nbsp;</span>","synthetic":false,"types":[]},{"text":"impl&lt;T:&nbsp;Trait&gt; Debug for Call&lt;T&gt;","synthetic":false,"types":[]}];
implementors["pallet_dapps_staking"] = [{"text":"impl Debug for StakingParameters","synthetic":false,"types":[]},{"text":"impl&lt;AccountId, Balance&gt; Debug for Nominations&lt;AccountId, Balance&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;AccountId: Debug,<br>&nbsp;&nbsp;&nbsp;&nbsp;Balance: Debug,&nbsp;</span>","synthetic":false,"types":[]},{"text":"impl&lt;AccountId:&nbsp;Ord, Balance:&nbsp;HasCompact&gt; Debug for EraStakingPoints&lt;AccountId, Balance&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;AccountId: Debug,<br>&nbsp;&nbsp;&nbsp;&nbsp;Balance: Debug,&nbsp;</span>","synthetic":false,"types":[]},{"text":"impl&lt;Balance:&nbsp;HasCompact&gt; Debug for UnlockChunk&lt;Balance&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;Balance: Debug,&nbsp;</span>","synthetic":false,"types":[]},{"text":"impl&lt;AccountId, Balance:&nbsp;HasCompact&gt; Debug for StakingLedger&lt;AccountId, Balance&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;AccountId: Debug,<br>&nbsp;&nbsp;&nbsp;&nbsp;Balance: Debug,&nbsp;</span>","synthetic":false,"types":[]},{"text":"impl Debug for Vote","synthetic":false,"types":[]},{"text":"impl Debug for VoteCounts","synthetic":false,"types":[]},{"text":"impl&lt;AccountId, Balance&gt; Debug for RawEvent&lt;AccountId, Balance&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;AccountId: Debug,<br>&nbsp;&nbsp;&nbsp;&nbsp;Balance: Debug,&nbsp;</span>","synthetic":false,"types":[]},{"text":"impl&lt;T:&nbsp;Trait&gt; Debug for Error&lt;T&gt;","synthetic":false,"types":[]},{"text":"impl&lt;T:&nbsp;Trait&gt; Debug for Module&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Debug,&nbsp;</span>","synthetic":false,"types":[]},{"text":"impl&lt;T:&nbsp;Trait&gt; Debug for Call&lt;T&gt;","synthetic":false,"types":[]}];
implementors["pallet_operator_trading"] = [{"text":"impl Debug for OfferState","synthetic":false,"types":[]},{"text":"impl&lt;AccountId:&nbsp;Debug, Balance:&nbsp;Debug, Moment:&nbsp;Debug&gt; Debug for Offer&lt;AccountId, Balance, Moment&gt;","synthetic":false,"types":[]},{"text":"impl&lt;T:&nbsp;Trait&gt; Debug for Module&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Debug,&nbsp;</span>","synthetic":false,"types":[]},{"text":"impl&lt;T:&nbsp;Trait&gt; Debug for Call&lt;T&gt;","synthetic":false,"types":[]},{"text":"impl&lt;AccountId&gt; Debug for RawEvent&lt;AccountId&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;AccountId: Debug,&nbsp;</span>","synthetic":false,"types":[]}];
implementors["pallet_ovm"] = [{"text":"impl&lt;CodeHash&gt; Debug for PredicateContract&lt;CodeHash&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;CodeHash: Debug,&nbsp;</span>","synthetic":false,"types":[]},{"text":"impl&lt;AccountId&gt; Debug for Property&lt;AccountId&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;AccountId: Debug,&nbsp;</span>","synthetic":false,"types":[]},{"text":"impl Debug for Decision","synthetic":false,"types":[]},{"text":"impl&lt;Hash, BlockNumber&gt; Debug for ChallengeGame&lt;Hash, BlockNumber&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;Hash: Debug,<br>&nbsp;&nbsp;&nbsp;&nbsp;BlockNumber: Debug,&nbsp;</span>","synthetic":false,"types":[]},{"text":"impl Debug for Schedule","synthetic":false,"types":[]},{"text":"impl&lt;AccountId, Property, Hash, BlockNumber&gt; Debug for RawEvent&lt;AccountId, Property, Hash, BlockNumber&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;AccountId: Debug,<br>&nbsp;&nbsp;&nbsp;&nbsp;Property: Debug,<br>&nbsp;&nbsp;&nbsp;&nbsp;Hash: Debug,<br>&nbsp;&nbsp;&nbsp;&nbsp;BlockNumber: Debug,&nbsp;</span>","synthetic":false,"types":[]},{"text":"impl&lt;T:&nbsp;Trait&gt; Debug for Error&lt;T&gt;","synthetic":false,"types":[]},{"text":"impl&lt;T:&nbsp;Trait&gt; Debug for Module&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Debug,&nbsp;</span>","synthetic":false,"types":[]},{"text":"impl&lt;T:&nbsp;Trait&gt; Debug for Call&lt;T&gt;","synthetic":false,"types":[]}];
implementors["pallet_plasm_lockdrop"] = [{"text":"impl Debug for LockCheck","synthetic":false,"types":[]},{"text":"impl Debug for EcdsaSignature","synthetic":false,"types":[]},{"text":"impl Debug for Lockdrop","synthetic":false,"types":[]},{"text":"impl&lt;AuthorityId:&nbsp;Ord&gt; Debug for Claim&lt;AuthorityId&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;AuthorityId: Debug,&nbsp;</span>","synthetic":false,"types":[]},{"text":"impl Debug for ClaimVote","synthetic":false,"types":[]},{"text":"impl&lt;DollarRate:&nbsp;Member + Parameter&gt; Debug for TickerRate&lt;DollarRate&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;DollarRate: Debug,&nbsp;</span>","synthetic":false,"types":[]},{"text":"impl&lt;AccountId, AuthorityId, DollarRate, Balance&gt; Debug for RawEvent&lt;AccountId, AuthorityId, DollarRate, Balance&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;AccountId: Debug,<br>&nbsp;&nbsp;&nbsp;&nbsp;AuthorityId: Debug,<br>&nbsp;&nbsp;&nbsp;&nbsp;DollarRate: Debug,<br>&nbsp;&nbsp;&nbsp;&nbsp;Balance: Debug,&nbsp;</span>","synthetic":false,"types":[]},{"text":"impl&lt;T:&nbsp;Trait&gt; Debug for Error&lt;T&gt;","synthetic":false,"types":[]},{"text":"impl&lt;T:&nbsp;Trait&gt; Debug for Module&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Debug,&nbsp;</span>","synthetic":false,"types":[]},{"text":"impl&lt;T:&nbsp;Trait&gt; Debug for Call&lt;T&gt;","synthetic":false,"types":[]}];
implementors["pallet_plasm_rewards"] = [{"text":"impl Debug for Releases","synthetic":false,"types":[]},{"text":"impl&lt;Moment&gt; Debug for ActiveEraInfo&lt;Moment&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;Moment: Debug,&nbsp;</span>","synthetic":false,"types":[]},{"text":"impl&lt;Balance&gt; Debug for RawEvent&lt;Balance&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;Balance: Debug,&nbsp;</span>","synthetic":false,"types":[]},{"text":"impl&lt;T:&nbsp;Trait&gt; Debug for Error&lt;T&gt;","synthetic":false,"types":[]},{"text":"impl&lt;T:&nbsp;Trait&gt; Debug for Module&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Debug,&nbsp;</span>","synthetic":false,"types":[]},{"text":"impl&lt;T:&nbsp;Trait&gt; Debug for Call&lt;T&gt;","synthetic":false,"types":[]}];
implementors["pallet_plasm_validator"] = [{"text":"impl&lt;T:&nbsp;Trait&gt; Debug for Module&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Debug,&nbsp;</span>","synthetic":false,"types":[]},{"text":"impl&lt;T:&nbsp;Trait&gt; Debug for Call&lt;T&gt;","synthetic":false,"types":[]},{"text":"impl&lt;AccountId, Balance&gt; Debug for RawEvent&lt;AccountId, Balance&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;AccountId: Debug,<br>&nbsp;&nbsp;&nbsp;&nbsp;Balance: Debug,&nbsp;</span>","synthetic":false,"types":[]}];
implementors["pallet_plasma"] = [{"text":"impl&lt;Balance&gt; Debug for Range&lt;Balance&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;Balance: Debug,&nbsp;</span>","synthetic":false,"types":[]},{"text":"impl&lt;AccountId, Balance, BlockNumber&gt; Debug for StateUpdate&lt;AccountId, Balance, BlockNumber&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;AccountId: Debug,<br>&nbsp;&nbsp;&nbsp;&nbsp;Balance: Debug,<br>&nbsp;&nbsp;&nbsp;&nbsp;BlockNumber: Debug,&nbsp;</span>","synthetic":false,"types":[]},{"text":"impl&lt;AccountId&gt; Debug for Checkpoint&lt;AccountId&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;AccountId: Debug,&nbsp;</span>","synthetic":false,"types":[]},{"text":"impl&lt;AccountId, BlockNumber, Balance, Hash&gt; Debug for Exit&lt;AccountId, BlockNumber, Balance, Hash&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;AccountId: Debug,<br>&nbsp;&nbsp;&nbsp;&nbsp;BlockNumber: Debug,<br>&nbsp;&nbsp;&nbsp;&nbsp;Balance: Debug,<br>&nbsp;&nbsp;&nbsp;&nbsp;Hash: Debug,&nbsp;</span>","synthetic":false,"types":[]},{"text":"impl&lt;AccountId, Balance, Hash&gt; Debug for InclusionProof&lt;AccountId, Balance, Hash&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;AccountId: Debug,<br>&nbsp;&nbsp;&nbsp;&nbsp;Balance: Debug,<br>&nbsp;&nbsp;&nbsp;&nbsp;Hash: Debug,&nbsp;</span>","synthetic":false,"types":[]},{"text":"impl&lt;Balance, Hash&gt; Debug for IntervalInclusionProof&lt;Balance, Hash&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;Balance: Debug,<br>&nbsp;&nbsp;&nbsp;&nbsp;Hash: Debug,&nbsp;</span>","synthetic":false,"types":[]},{"text":"impl&lt;AccountId, Balance, Hash&gt; Debug for AddressInclusionProof&lt;AccountId, Balance, Hash&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;AccountId: Debug,<br>&nbsp;&nbsp;&nbsp;&nbsp;Balance: Debug,<br>&nbsp;&nbsp;&nbsp;&nbsp;Hash: Debug,&nbsp;</span>","synthetic":false,"types":[]},{"text":"impl&lt;Balance, Hash&gt; Debug for IntervalTreeNode&lt;Balance, Hash&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;Balance: Debug,<br>&nbsp;&nbsp;&nbsp;&nbsp;Hash: Debug,&nbsp;</span>","synthetic":false,"types":[]},{"text":"impl&lt;AccountId, Hash&gt; Debug for AddressTreeNode&lt;AccountId, Hash&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;AccountId: Debug,<br>&nbsp;&nbsp;&nbsp;&nbsp;Hash: Debug,&nbsp;</span>","synthetic":false,"types":[]},{"text":"impl&lt;AccountId, Balance, BlockNumber&gt; Debug for ExitDeposit&lt;AccountId, Balance, BlockNumber&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;AccountId: Debug,<br>&nbsp;&nbsp;&nbsp;&nbsp;Balance: Debug,<br>&nbsp;&nbsp;&nbsp;&nbsp;BlockNumber: Debug,&nbsp;</span>","synthetic":false,"types":[]},{"text":"impl&lt;AccountId, Hash, BlockNumber, Range, Checkpoint&gt; Debug for RawEvent&lt;AccountId, Hash, BlockNumber, Range, Checkpoint&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;AccountId: Debug,<br>&nbsp;&nbsp;&nbsp;&nbsp;Hash: Debug,<br>&nbsp;&nbsp;&nbsp;&nbsp;BlockNumber: Debug,<br>&nbsp;&nbsp;&nbsp;&nbsp;Range: Debug,<br>&nbsp;&nbsp;&nbsp;&nbsp;Checkpoint: Debug,&nbsp;</span>","synthetic":false,"types":[]},{"text":"impl&lt;T:&nbsp;Trait&gt; Debug for Module&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Debug,&nbsp;</span>","synthetic":false,"types":[]},{"text":"impl&lt;T:&nbsp;Trait&gt; Debug for Call&lt;T&gt;","synthetic":false,"types":[]},{"text":"impl&lt;T:&nbsp;Trait&gt; Debug for Error&lt;T&gt;","synthetic":false,"types":[]}];
implementors["plasm_cli"] = [{"text":"impl Debug for Cli","synthetic":false,"types":[]},{"text":"impl Debug for Subcommand","synthetic":false,"types":[]}];
implementors["plasm_runtime"] = [{"text":"impl Debug for SessionKeys","synthetic":false,"types":[]},{"text":"impl Debug for Runtime","synthetic":false,"types":[]},{"text":"impl Debug for Event","synthetic":false,"types":[]},{"text":"impl Debug for Origin","synthetic":false,"types":[]},{"text":"impl Debug for OriginCaller","synthetic":false,"types":[]},{"text":"impl Debug for Call","synthetic":false,"types":[]}];
if (window.register_implementors) {window.register_implementors(implementors);} else {window.pending_implementors = implementors;}})()