(function() {var implementors = {};
implementors["pallet_custom_signatures"] = [{"text":"impl Freeze for EthereumSignature","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Freeze for Error&lt;T&gt;","synthetic":true,"types":[]},{"text":"impl&lt;AccountId&gt; Freeze for RawEvent&lt;AccountId&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;AccountId: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Freeze for Module&lt;T&gt;","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Freeze for Call&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;T as Config&gt;::AccountId: Freeze,&nbsp;</span>","synthetic":true,"types":[]}];
implementors["pallet_plasm_rewards"] = [{"text":"impl&lt;N&gt; Freeze for FirstPlasmIncentive&lt;N&gt;","synthetic":true,"types":[]},{"text":"impl&lt;N&gt; Freeze for CommunityRewards&lt;N&gt;","synthetic":true,"types":[]},{"text":"impl Freeze for SimpleComputeTotalPayout","synthetic":true,"types":[]},{"text":"impl&lt;Balance&gt; Freeze for MaintainRatioComputeTotalPayout&lt;Balance&gt;","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Freeze for DefaultForDappsStaking&lt;T&gt;","synthetic":true,"types":[]},{"text":"impl Freeze for Releases","synthetic":true,"types":[]},{"text":"impl&lt;Moment&gt; Freeze for ActiveEraInfo&lt;Moment&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;Moment: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl Freeze for GenesisConfig","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Freeze for ForDappsEraReward&lt;T&gt;","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Freeze for ForSecurityEraReward&lt;T&gt;","synthetic":true,"types":[]},{"text":"impl Freeze for HistoryDepth","synthetic":true,"types":[]},{"text":"impl Freeze for BondedEras","synthetic":true,"types":[]},{"text":"impl Freeze for CurrentEra","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Freeze for ActiveEra&lt;T&gt;","synthetic":true,"types":[]},{"text":"impl Freeze for ErasStartSessionIndex","synthetic":true,"types":[]},{"text":"impl Freeze for ForceEra","synthetic":true,"types":[]},{"text":"impl&lt;Balance&gt; Freeze for RawEvent&lt;Balance&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;Balance: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Freeze for Error&lt;T&gt;","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Freeze for Module&lt;T&gt;","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Freeze for Call&lt;T&gt;","synthetic":true,"types":[]}];
implementors["pallet_plasm_validator"] = [{"text":"impl&lt;T&gt; Freeze for GenesisConfig&lt;T&gt;","synthetic":true,"types":[]},{"text":"impl Freeze for UntreatedEra","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Freeze for ElectedValidators&lt;T&gt;","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Freeze for Validators&lt;T&gt;","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Freeze for Module&lt;T&gt;","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Freeze for Call&lt;T&gt;","synthetic":true,"types":[]},{"text":"impl&lt;AccountId, Balance&gt; Freeze for RawEvent&lt;AccountId, Balance&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;AccountId: Freeze,<br>&nbsp;&nbsp;&nbsp;&nbsp;Balance: Freeze,&nbsp;</span>","synthetic":true,"types":[]}];
implementors["plasm_cli"] = [{"text":"impl Freeze for Extensions","synthetic":true,"types":[]},{"text":"impl Freeze for Cli","synthetic":true,"types":[]},{"text":"impl Freeze for Subcommand","synthetic":true,"types":[]}];
implementors["plasm_primitives"] = [{"text":"impl Freeze for ReporterAppCrypto","synthetic":true,"types":[]}];
implementors["plasm_rpc"] = [{"text":"impl&lt;C, F, P&gt; Freeze for LightDeps&lt;C, F, P&gt;","synthetic":true,"types":[]},{"text":"impl Freeze for BabeDeps","synthetic":true,"types":[]},{"text":"impl&lt;B&gt; Freeze for GrandpaDeps&lt;B&gt;","synthetic":true,"types":[]},{"text":"impl&lt;C, P, SC, B&gt; Freeze for FullDeps&lt;C, P, SC, B&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;SC: Freeze,&nbsp;</span>","synthetic":true,"types":[]}];
implementors["plasm_runtime"] = [{"text":"impl Freeze for HOLDERS","synthetic":true,"types":[]},{"text":"impl Freeze for BlockHashCount","synthetic":true,"types":[]},{"text":"impl Freeze for Version","synthetic":true,"types":[]},{"text":"impl Freeze for RuntimeBlockLength","synthetic":true,"types":[]},{"text":"impl Freeze for RuntimeBlockWeights","synthetic":true,"types":[]},{"text":"impl Freeze for SS58Prefix","synthetic":true,"types":[]},{"text":"impl Freeze for EpochDuration","synthetic":true,"types":[]},{"text":"impl Freeze for ExpectedBlockTime","synthetic":true,"types":[]},{"text":"impl Freeze for ReportLongevity","synthetic":true,"types":[]},{"text":"impl Freeze for IndexDeposit","synthetic":true,"types":[]},{"text":"impl Freeze for ExistentialDeposit","synthetic":true,"types":[]},{"text":"impl Freeze for MaxLocks","synthetic":true,"types":[]},{"text":"impl Freeze for TransactionByteFee","synthetic":true,"types":[]},{"text":"impl Freeze for TargetBlockFullness","synthetic":true,"types":[]},{"text":"impl Freeze for AdjustmentVariable","synthetic":true,"types":[]},{"text":"impl Freeze for MinimumMultiplier","synthetic":true,"types":[]},{"text":"impl Freeze for MinimumPeriod","synthetic":true,"types":[]},{"text":"impl Freeze for UncleGenerations","synthetic":true,"types":[]},{"text":"impl Freeze for SessionKeys","synthetic":true,"types":[]},{"text":"impl Freeze for DisabledValidatorsThreshold","synthetic":true,"types":[]},{"text":"impl Freeze for MaximumSchedulerWeight","synthetic":true,"types":[]},{"text":"impl Freeze for MaxScheduledPerBlock","synthetic":true,"types":[]},{"text":"impl Freeze for SessionsPerEra","synthetic":true,"types":[]},{"text":"impl Freeze for BondingDuration","synthetic":true,"types":[]},{"text":"impl Freeze for TombstoneDeposit","synthetic":true,"types":[]},{"text":"impl Freeze for DepositPerContract","synthetic":true,"types":[]},{"text":"impl Freeze for DepositPerStorageByte","synthetic":true,"types":[]},{"text":"impl Freeze for DepositPerStorageItem","synthetic":true,"types":[]},{"text":"impl Freeze for RentFraction","synthetic":true,"types":[]},{"text":"impl Freeze for SurchargeReward","synthetic":true,"types":[]},{"text":"impl Freeze for SignedClaimHandicap","synthetic":true,"types":[]},{"text":"impl Freeze for MaxDepth","synthetic":true,"types":[]},{"text":"impl Freeze for MaxValueSize","synthetic":true,"types":[]},{"text":"impl Freeze for DeletionWeightLimit","synthetic":true,"types":[]},{"text":"impl Freeze for DeletionQueueDepth","synthetic":true,"types":[]},{"text":"impl Freeze for MaxCodeSize","synthetic":true,"types":[]},{"text":"impl Freeze for SessionDuration","synthetic":true,"types":[]},{"text":"impl Freeze for ImOnlineUnsignedPriority","synthetic":true,"types":[]},{"text":"impl Freeze for OffencesWeightSoftLimit","synthetic":true,"types":[]},{"text":"impl Freeze for EcdsaUnsignedPriority","synthetic":true,"types":[]},{"text":"impl Freeze for NickReservationFee","synthetic":true,"types":[]},{"text":"impl Freeze for MinNickLength","synthetic":true,"types":[]},{"text":"impl Freeze for MaxNickLength","synthetic":true,"types":[]},{"text":"impl Freeze for GasWeightMapping","synthetic":true,"types":[]},{"text":"impl Freeze for ChainId","synthetic":true,"types":[]},{"text":"impl Freeze for TransactionConverter","synthetic":true,"types":[]},{"text":"impl&lt;F&gt; Freeze for EthereumFindAuthor&lt;F&gt;","synthetic":true,"types":[]},{"text":"impl Freeze for BlockGasLimit","synthetic":true,"types":[]},{"text":"impl Freeze for Runtime","synthetic":true,"types":[]},{"text":"impl Freeze for Event","synthetic":true,"types":[]},{"text":"impl Freeze for Origin","synthetic":true,"types":[]},{"text":"impl Freeze for OriginCaller","synthetic":true,"types":[]},{"text":"impl Freeze for PalletInfo","synthetic":true,"types":[]},{"text":"impl Freeze for Call","synthetic":true,"types":[]},{"text":"impl Freeze for GenesisConfig","synthetic":true,"types":[]},{"text":"impl Freeze for RuntimeApi","synthetic":true,"types":[]},{"text":"impl&lt;Block, C&gt; !Freeze for RuntimeApiImpl&lt;Block, C&gt;","synthetic":true,"types":[]}];
if (window.register_implementors) {window.register_implementors(implementors);} else {window.pending_implementors = implementors;}})()