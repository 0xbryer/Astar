(function() {var implementors = {};
implementors["pallet_custom_signatures"] = [{"text":"impl Unpin for EthereumSignature","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Unpin for Error&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Unpin,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;AccountId&gt; Unpin for RawEvent&lt;AccountId&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;AccountId: Unpin,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Unpin for Module&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Unpin,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Unpin for Call&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Unpin,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;T as Config&gt;::AccountId: Unpin,&nbsp;</span>","synthetic":true,"types":[]}];
implementors["pallet_plasm_rewards"] = [{"text":"impl&lt;N&gt; Unpin for FirstPlasmIncentive&lt;N&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;N: Unpin,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;N&gt; Unpin for CommunityRewards&lt;N&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;N: Unpin,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl Unpin for SimpleComputeTotalPayout","synthetic":true,"types":[]},{"text":"impl&lt;Balance&gt; Unpin for MaintainRatioComputeTotalPayout&lt;Balance&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;Balance: Unpin,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Unpin for DefaultForDappsStaking&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Unpin,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl Unpin for Releases","synthetic":true,"types":[]},{"text":"impl&lt;Moment&gt; Unpin for ActiveEraInfo&lt;Moment&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;Moment: Unpin,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl Unpin for GenesisConfig","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Unpin for ForDappsEraReward&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Unpin,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Unpin for ForSecurityEraReward&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Unpin,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl Unpin for HistoryDepth","synthetic":true,"types":[]},{"text":"impl Unpin for BondedEras","synthetic":true,"types":[]},{"text":"impl Unpin for CurrentEra","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Unpin for ActiveEra&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Unpin,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl Unpin for ErasStartSessionIndex","synthetic":true,"types":[]},{"text":"impl Unpin for ForceEra","synthetic":true,"types":[]},{"text":"impl&lt;Balance&gt; Unpin for RawEvent&lt;Balance&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;Balance: Unpin,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Unpin for Error&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Unpin,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Unpin for Module&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Unpin,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Unpin for Call&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Unpin,&nbsp;</span>","synthetic":true,"types":[]}];
implementors["pallet_plasm_validator"] = [{"text":"impl&lt;T&gt; Unpin for GenesisConfig&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;T as Config&gt;::AccountId: Unpin,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl Unpin for UntreatedEra","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Unpin for ElectedValidators&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Unpin,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Unpin for Validators&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Unpin,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Unpin for Module&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Unpin,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Unpin for Call&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Unpin,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;T as Config&gt;::AccountId: Unpin,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;AccountId, Balance&gt; Unpin for RawEvent&lt;AccountId, Balance&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;AccountId: Unpin,<br>&nbsp;&nbsp;&nbsp;&nbsp;Balance: Unpin,&nbsp;</span>","synthetic":true,"types":[]}];
implementors["plasm_cli"] = [{"text":"impl Unpin for Extensions","synthetic":true,"types":[]},{"text":"impl Unpin for Cli","synthetic":true,"types":[]},{"text":"impl Unpin for Subcommand","synthetic":true,"types":[]}];
implementors["plasm_primitives"] = [{"text":"impl Unpin for ReporterAppCrypto","synthetic":true,"types":[]}];
implementors["plasm_rpc"] = [{"text":"impl&lt;C, F, P&gt; Unpin for LightDeps&lt;C, F, P&gt;","synthetic":true,"types":[]},{"text":"impl Unpin for BabeDeps","synthetic":true,"types":[]},{"text":"impl&lt;B&gt; Unpin for GrandpaDeps&lt;B&gt;","synthetic":true,"types":[]},{"text":"impl&lt;C, P, SC, B&gt; Unpin for FullDeps&lt;C, P, SC, B&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;SC: Unpin,&nbsp;</span>","synthetic":true,"types":[]}];
implementors["plasm_runtime"] = [{"text":"impl Unpin for HOLDERS","synthetic":true,"types":[]},{"text":"impl Unpin for BlockHashCount","synthetic":true,"types":[]},{"text":"impl Unpin for Version","synthetic":true,"types":[]},{"text":"impl Unpin for RuntimeBlockLength","synthetic":true,"types":[]},{"text":"impl Unpin for RuntimeBlockWeights","synthetic":true,"types":[]},{"text":"impl Unpin for SS58Prefix","synthetic":true,"types":[]},{"text":"impl Unpin for EpochDuration","synthetic":true,"types":[]},{"text":"impl Unpin for ExpectedBlockTime","synthetic":true,"types":[]},{"text":"impl Unpin for ReportLongevity","synthetic":true,"types":[]},{"text":"impl Unpin for IndexDeposit","synthetic":true,"types":[]},{"text":"impl Unpin for ExistentialDeposit","synthetic":true,"types":[]},{"text":"impl Unpin for MaxLocks","synthetic":true,"types":[]},{"text":"impl Unpin for TransactionByteFee","synthetic":true,"types":[]},{"text":"impl Unpin for TargetBlockFullness","synthetic":true,"types":[]},{"text":"impl Unpin for AdjustmentVariable","synthetic":true,"types":[]},{"text":"impl Unpin for MinimumMultiplier","synthetic":true,"types":[]},{"text":"impl Unpin for MinimumPeriod","synthetic":true,"types":[]},{"text":"impl Unpin for UncleGenerations","synthetic":true,"types":[]},{"text":"impl Unpin for SessionKeys","synthetic":true,"types":[]},{"text":"impl Unpin for DisabledValidatorsThreshold","synthetic":true,"types":[]},{"text":"impl Unpin for MaximumSchedulerWeight","synthetic":true,"types":[]},{"text":"impl Unpin for MaxScheduledPerBlock","synthetic":true,"types":[]},{"text":"impl Unpin for SessionsPerEra","synthetic":true,"types":[]},{"text":"impl Unpin for BondingDuration","synthetic":true,"types":[]},{"text":"impl Unpin for TombstoneDeposit","synthetic":true,"types":[]},{"text":"impl Unpin for DepositPerContract","synthetic":true,"types":[]},{"text":"impl Unpin for DepositPerStorageByte","synthetic":true,"types":[]},{"text":"impl Unpin for DepositPerStorageItem","synthetic":true,"types":[]},{"text":"impl Unpin for RentFraction","synthetic":true,"types":[]},{"text":"impl Unpin for SurchargeReward","synthetic":true,"types":[]},{"text":"impl Unpin for SignedClaimHandicap","synthetic":true,"types":[]},{"text":"impl Unpin for MaxDepth","synthetic":true,"types":[]},{"text":"impl Unpin for MaxValueSize","synthetic":true,"types":[]},{"text":"impl Unpin for DeletionWeightLimit","synthetic":true,"types":[]},{"text":"impl Unpin for DeletionQueueDepth","synthetic":true,"types":[]},{"text":"impl Unpin for MaxCodeSize","synthetic":true,"types":[]},{"text":"impl Unpin for SessionDuration","synthetic":true,"types":[]},{"text":"impl Unpin for ImOnlineUnsignedPriority","synthetic":true,"types":[]},{"text":"impl Unpin for OffencesWeightSoftLimit","synthetic":true,"types":[]},{"text":"impl Unpin for EcdsaUnsignedPriority","synthetic":true,"types":[]},{"text":"impl Unpin for NickReservationFee","synthetic":true,"types":[]},{"text":"impl Unpin for MinNickLength","synthetic":true,"types":[]},{"text":"impl Unpin for MaxNickLength","synthetic":true,"types":[]},{"text":"impl Unpin for GasWeightMapping","synthetic":true,"types":[]},{"text":"impl Unpin for ChainId","synthetic":true,"types":[]},{"text":"impl Unpin for TransactionConverter","synthetic":true,"types":[]},{"text":"impl&lt;F&gt; Unpin for EthereumFindAuthor&lt;F&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;F: Unpin,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl Unpin for BlockGasLimit","synthetic":true,"types":[]},{"text":"impl Unpin for Runtime","synthetic":true,"types":[]},{"text":"impl Unpin for Event","synthetic":true,"types":[]},{"text":"impl Unpin for Origin","synthetic":true,"types":[]},{"text":"impl Unpin for OriginCaller","synthetic":true,"types":[]},{"text":"impl Unpin for PalletInfo","synthetic":true,"types":[]},{"text":"impl Unpin for Call","synthetic":true,"types":[]},{"text":"impl Unpin for GenesisConfig","synthetic":true,"types":[]},{"text":"impl Unpin for RuntimeApi","synthetic":true,"types":[]},{"text":"impl&lt;Block, C&gt; Unpin for RuntimeApiImpl&lt;Block, C&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;Block as Block&gt;::Hash: Unpin,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;&lt;Block as Block&gt;::Header as Header&gt;::Hashing: Hasher + Unpin,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;&lt;Block as Block&gt;::Header as Header&gt;::Number: Unpin,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;&lt;C as CallApiAt&lt;Block&gt;&gt;::StateBackend as Backend&lt;&lt;&lt;Block as Block&gt;::Header as Header&gt;::Hashing&gt;&gt;::Transaction: Unpin,&nbsp;</span>","synthetic":true,"types":[]}];
if (window.register_implementors) {window.register_implementors(implementors);} else {window.pending_implementors = implementors;}})()