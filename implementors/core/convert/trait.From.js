(function() {var implementors = {};
implementors["ovmi"] = [{"text":"impl&lt;Address&gt; From&lt;&amp;'static str&gt; for ExecError&lt;Address&gt;","synthetic":false,"types":[]},{"text":"impl From&lt;PredicateTypeSerializable&gt; for PredicateType","synthetic":false,"types":[]},{"text":"impl From&lt;VarTypeSerializable&gt; for VarType","synthetic":false,"types":[]},{"text":"impl From&lt;CompiledPredicateSerializable&gt; for CompiledPredicate","synthetic":false,"types":[]},{"text":"impl From&lt;ConstantVariableSerializable&gt; for ConstantVariable","synthetic":false,"types":[]},{"text":"impl From&lt;IntermediateCompiledPredicateSerializable&gt; for IntermediateCompiledPredicate","synthetic":false,"types":[]},{"text":"impl From&lt;AtomicPropositionOrPlaceholderSerializable&gt; for AtomicPropositionOrPlaceholder","synthetic":false,"types":[]},{"text":"impl From&lt;AtomicPropositionSerializable&gt; for AtomicProposition","synthetic":false,"types":[]},{"text":"impl From&lt;PredicateCallSerializable&gt; for PredicateCall","synthetic":false,"types":[]},{"text":"impl From&lt;AtomicPredicateCallSerializable&gt; for AtomicPredicateCall","synthetic":false,"types":[]},{"text":"impl From&lt;InputPredicateCallSerializable&gt; for InputPredicateCall","synthetic":false,"types":[]},{"text":"impl From&lt;VariablePredicateCallSerializable&gt; for VariablePredicateCall","synthetic":false,"types":[]},{"text":"impl From&lt;CompiledPredicateCallSerializable&gt; for CompiledPredicateCall","synthetic":false,"types":[]},{"text":"impl From&lt;CompiledInputSerializable&gt; for CompiledInput","synthetic":false,"types":[]},{"text":"impl From&lt;ConstantInputSerializable&gt; for ConstantInput","synthetic":false,"types":[]},{"text":"impl From&lt;LabelInputSerializable&gt; for LabelInput","synthetic":false,"types":[]},{"text":"impl From&lt;NormalInputSerializable&gt; for NormalInput","synthetic":false,"types":[]},{"text":"impl From&lt;VariableInputSerializable&gt; for VariableInput","synthetic":false,"types":[]},{"text":"impl From&lt;SelfInputSerializable&gt; for SelfInput","synthetic":false,"types":[]},{"text":"impl From&lt;LogicalConnectiveSerializable&gt; for LogicalConnective","synthetic":false,"types":[]}];
implementors["pallet_contract_operator"] = [{"text":"impl&lt;AccountId, Parameters&gt; From&lt;RawEvent&lt;AccountId, Parameters&gt;&gt; for ()","synthetic":false,"types":[]}];
implementors["pallet_custom_signatures"] = [{"text":"impl From&lt;Signature&gt; for EthereumSignature","synthetic":false,"types":[]},{"text":"impl&lt;T:&nbsp;Trait&gt; From&lt;Error&lt;T&gt;&gt; for &amp;'static str","synthetic":false,"types":[]},{"text":"impl&lt;T:&nbsp;Trait&gt; From&lt;Error&lt;T&gt;&gt; for DispatchError","synthetic":false,"types":[]},{"text":"impl&lt;AccountId&gt; From&lt;RawEvent&lt;AccountId&gt;&gt; for ()","synthetic":false,"types":[]}];
implementors["pallet_dapps_staking"] = [{"text":"impl&lt;AccountId, Balance&gt; From&lt;RawEvent&lt;AccountId, Balance&gt;&gt; for ()","synthetic":false,"types":[]},{"text":"impl&lt;T:&nbsp;Trait&gt; From&lt;Error&lt;T&gt;&gt; for &amp;'static str","synthetic":false,"types":[]},{"text":"impl&lt;T:&nbsp;Trait&gt; From&lt;Error&lt;T&gt;&gt; for DispatchError","synthetic":false,"types":[]}];
implementors["pallet_operator_trading"] = [{"text":"impl&lt;AccountId&gt; From&lt;RawEvent&lt;AccountId&gt;&gt; for ()","synthetic":false,"types":[]}];
implementors["pallet_ovm"] = [{"text":"impl&lt;AccountId, Property, Hash, BlockNumber&gt; From&lt;RawEvent&lt;AccountId, Property, Hash, BlockNumber&gt;&gt; for ()","synthetic":false,"types":[]},{"text":"impl&lt;T:&nbsp;Trait&gt; From&lt;Error&lt;T&gt;&gt; for &amp;'static str","synthetic":false,"types":[]},{"text":"impl&lt;T:&nbsp;Trait&gt; From&lt;Error&lt;T&gt;&gt; for DispatchError","synthetic":false,"types":[]}];
implementors["pallet_plasm_lockdrop"] = [{"text":"impl&lt;AccountId, AuthorityId, DollarRate, Balance&gt; From&lt;RawEvent&lt;AccountId, AuthorityId, DollarRate, Balance&gt;&gt; for ()","synthetic":false,"types":[]},{"text":"impl&lt;T:&nbsp;Trait&gt; From&lt;Error&lt;T&gt;&gt; for &amp;'static str","synthetic":false,"types":[]},{"text":"impl&lt;T:&nbsp;Trait&gt; From&lt;Error&lt;T&gt;&gt; for DispatchError","synthetic":false,"types":[]}];
implementors["pallet_plasm_rewards"] = [{"text":"impl&lt;Balance&gt; From&lt;RawEvent&lt;Balance&gt;&gt; for ()","synthetic":false,"types":[]},{"text":"impl&lt;T:&nbsp;Trait&gt; From&lt;Error&lt;T&gt;&gt; for &amp;'static str","synthetic":false,"types":[]},{"text":"impl&lt;T:&nbsp;Trait&gt; From&lt;Error&lt;T&gt;&gt; for DispatchError","synthetic":false,"types":[]}];
implementors["pallet_plasm_validator"] = [{"text":"impl&lt;AccountId, Balance&gt; From&lt;RawEvent&lt;AccountId, Balance&gt;&gt; for ()","synthetic":false,"types":[]}];
implementors["pallet_plasma"] = [{"text":"impl&lt;AccountId, Hash, BlockNumber, Range, Checkpoint&gt; From&lt;RawEvent&lt;AccountId, Hash, BlockNumber, Range, Checkpoint&gt;&gt; for ()","synthetic":false,"types":[]},{"text":"impl&lt;T:&nbsp;Trait&gt; From&lt;Error&lt;T&gt;&gt; for &amp;'static str","synthetic":false,"types":[]},{"text":"impl&lt;T:&nbsp;Trait&gt; From&lt;Error&lt;T&gt;&gt; for DispatchError","synthetic":false,"types":[]}];
implementors["plasm_runtime"] = [{"text":"impl From&lt;RawEvent&lt;&lt;Runtime as Trait&gt;::AccountId&gt;&gt; for Event","synthetic":false,"types":[]},{"text":"impl From&lt;Event&gt; for Event","synthetic":false,"types":[]},{"text":"impl From&lt;RawEvent&lt;&lt;Runtime as Trait&gt;::AccountId, &lt;Runtime as Trait&gt;::AccountIndex&gt;&gt; for Event","synthetic":false,"types":[]},{"text":"impl From&lt;RawEvent&lt;&lt;Runtime as Trait&gt;::AccountId, &lt;Runtime as Trait&lt;DefaultInstance&gt;&gt;::Balance, DefaultInstance&gt;&gt; for Event","synthetic":false,"types":[]},{"text":"impl From&lt;RawEvent&lt;&lt;&lt;Runtime as Trait&gt;::Currency as Currency&lt;&lt;Runtime as Trait&gt;::AccountId&gt;&gt;::Balance, &lt;Runtime as Trait&gt;::AccountId, &lt;Runtime as Trait&gt;::Hash&gt;&gt; for Event","synthetic":false,"types":[]},{"text":"impl From&lt;RawEvent&lt;&lt;Runtime as Trait&gt;::AccountId, &lt;&lt;Runtime as Trait&gt;::Currency as Currency&lt;&lt;Runtime as Trait&gt;::AccountId&gt;&gt;::Balance&gt;&gt; for Event","synthetic":false,"types":[]},{"text":"impl From&lt;RawEvent&lt;&lt;Runtime as Trait&gt;::AccountId, &lt;Runtime as Trait&gt;::AuthorityId, &lt;Runtime as Trait&gt;::DollarRate, &lt;&lt;Runtime as Trait&gt;::Currency as Currency&lt;&lt;Runtime as Trait&gt;::AccountId&gt;&gt;::Balance&gt;&gt; for Event","synthetic":false,"types":[]},{"text":"impl From&lt;RawEvent&lt;&lt;Runtime as Trait&gt;::AccountId, &lt;&lt;Runtime as Trait&gt;::Currency as Currency&lt;&lt;Runtime as Trait&gt;::AccountId&gt;&gt;::Balance&gt;&gt; for Event","synthetic":false,"types":[]},{"text":"impl From&lt;RawEvent&lt;&lt;&lt;Runtime as Trait&gt;::Currency as Currency&lt;&lt;Runtime as Trait&gt;::AccountId&gt;&gt;::Balance&gt;&gt; for Event","synthetic":false,"types":[]},{"text":"impl From&lt;Event&gt; for Event","synthetic":false,"types":[]},{"text":"impl From&lt;Event&gt; for Event","synthetic":false,"types":[]},{"text":"impl From&lt;RawEvent&lt;&lt;Runtime as Trait&gt;::AccountId, &lt;Runtime as Trait&gt;::Parameters&gt;&gt; for Event","synthetic":false,"types":[]},{"text":"impl From&lt;RawEvent&lt;&lt;Runtime as Trait&gt;::AccountId&gt;&gt; for Event","synthetic":false,"types":[]},{"text":"impl From&lt;RawEvent&lt;&lt;Runtime as Trait&gt;::AccountId&gt;&gt; for Event","synthetic":false,"types":[]},{"text":"impl From&lt;RawEvent&lt;&lt;Runtime as Trait&gt;::AccountId, Property&lt;&lt;Runtime as Trait&gt;::AccountId&gt;, &lt;Runtime as Trait&gt;::Hash, &lt;Runtime as Trait&gt;::BlockNumber&gt;&gt; for Event","synthetic":false,"types":[]},{"text":"impl From&lt;RawEvent&lt;&lt;Runtime as Trait&gt;::AccountId, &lt;Runtime as Trait&gt;::Hash, &lt;Runtime as Trait&gt;::BlockNumber, Range&lt;&lt;&lt;Runtime as Trait&gt;::Currency as Currency&lt;&lt;Runtime as Trait&gt;::AccountId&gt;&gt;::Balance&gt;, Checkpoint&lt;&lt;Runtime as Trait&gt;::AccountId&gt;&gt;&gt; for Event","synthetic":false,"types":[]},{"text":"impl From&lt;RawEvent&lt;&lt;Runtime as Trait&gt;::AccountId, &lt;&lt;Runtime as Trait&gt;::Currency as Currency&lt;&lt;Runtime as Trait&gt;::AccountId&gt;&gt;::Balance&gt;&gt; for Event","synthetic":false,"types":[]},{"text":"impl From&lt;RawEvent&lt;&lt;Runtime as Trait&gt;::AccountId&gt;&gt; for Event","synthetic":false,"types":[]},{"text":"impl From&lt;Event&gt; for Event","synthetic":false,"types":[]},{"text":"impl From&lt;RawOrigin&lt;&lt;Runtime as Trait&gt;::AccountId&gt;&gt; for OriginCaller","synthetic":false,"types":[]},{"text":"impl From&lt;RawOrigin&lt;&lt;Runtime as Trait&gt;::AccountId&gt;&gt; for Origin","synthetic":false,"types":[]},{"text":"impl From&lt;OriginCaller&gt; for Origin","synthetic":false,"types":[]},{"text":"impl From&lt;Option&lt;&lt;Runtime as Trait&gt;::AccountId&gt;&gt; for Origin","synthetic":false,"types":[]},{"text":"impl From&lt;&lt;Module&lt;Runtime&gt; as Callable&lt;Runtime&gt;&gt;::Call&gt; for Call","synthetic":false,"types":[]},{"text":"impl From&lt;&lt;Module&lt;Runtime&gt; as Callable&lt;Runtime&gt;&gt;::Call&gt; for Call","synthetic":false,"types":[]},{"text":"impl From&lt;&lt;Module&lt;Runtime&gt; as Callable&lt;Runtime&gt;&gt;::Call&gt; for Call","synthetic":false,"types":[]},{"text":"impl From&lt;&lt;Module&lt;Runtime&gt; as Callable&lt;Runtime&gt;&gt;::Call&gt; for Call","synthetic":false,"types":[]},{"text":"impl From&lt;&lt;Module&lt;Runtime&gt; as Callable&lt;Runtime&gt;&gt;::Call&gt; for Call","synthetic":false,"types":[]},{"text":"impl From&lt;&lt;Module&lt;Runtime, DefaultInstance&gt; as Callable&lt;Runtime&gt;&gt;::Call&gt; for Call","synthetic":false,"types":[]},{"text":"impl From&lt;&lt;Module&lt;Runtime&gt; as Callable&lt;Runtime&gt;&gt;::Call&gt; for Call","synthetic":false,"types":[]},{"text":"impl From&lt;&lt;Module&lt;Runtime&gt; as Callable&lt;Runtime&gt;&gt;::Call&gt; for Call","synthetic":false,"types":[]},{"text":"impl From&lt;&lt;Module&lt;Runtime&gt; as Callable&lt;Runtime&gt;&gt;::Call&gt; for Call","synthetic":false,"types":[]},{"text":"impl From&lt;&lt;Module&lt;Runtime&gt; as Callable&lt;Runtime&gt;&gt;::Call&gt; for Call","synthetic":false,"types":[]},{"text":"impl From&lt;&lt;Module&lt;Runtime&gt; as Callable&lt;Runtime&gt;&gt;::Call&gt; for Call","synthetic":false,"types":[]},{"text":"impl From&lt;&lt;Module&lt;Runtime&gt; as Callable&lt;Runtime&gt;&gt;::Call&gt; for Call","synthetic":false,"types":[]},{"text":"impl From&lt;&lt;Module&lt;Runtime&gt; as Callable&lt;Runtime&gt;&gt;::Call&gt; for Call","synthetic":false,"types":[]},{"text":"impl From&lt;&lt;Module&lt;Runtime&gt; as Callable&lt;Runtime&gt;&gt;::Call&gt; for Call","synthetic":false,"types":[]},{"text":"impl From&lt;&lt;Module&lt;Runtime&gt; as Callable&lt;Runtime&gt;&gt;::Call&gt; for Call","synthetic":false,"types":[]},{"text":"impl From&lt;&lt;Module&lt;Runtime&gt; as Callable&lt;Runtime&gt;&gt;::Call&gt; for Call","synthetic":false,"types":[]},{"text":"impl From&lt;&lt;Module&lt;Runtime&gt; as Callable&lt;Runtime&gt;&gt;::Call&gt; for Call","synthetic":false,"types":[]},{"text":"impl From&lt;&lt;Module&lt;Runtime&gt; as Callable&lt;Runtime&gt;&gt;::Call&gt; for Call","synthetic":false,"types":[]},{"text":"impl From&lt;&lt;Module&lt;Runtime&gt; as Callable&lt;Runtime&gt;&gt;::Call&gt; for Call","synthetic":false,"types":[]},{"text":"impl From&lt;&lt;Module&lt;Runtime&gt; as Callable&lt;Runtime&gt;&gt;::Call&gt; for Call","synthetic":false,"types":[]},{"text":"impl From&lt;&lt;Module&lt;Runtime&gt; as Callable&lt;Runtime&gt;&gt;::Call&gt; for Call","synthetic":false,"types":[]},{"text":"impl From&lt;&lt;Module&lt;Runtime&gt; as Callable&lt;Runtime&gt;&gt;::Call&gt; for Call","synthetic":false,"types":[]},{"text":"impl From&lt;&lt;Module&lt;Runtime&gt; as Callable&lt;Runtime&gt;&gt;::Call&gt; for Call","synthetic":false,"types":[]},{"text":"impl From&lt;&lt;Module&lt;Runtime&gt; as Callable&lt;Runtime&gt;&gt;::Call&gt; for Call","synthetic":false,"types":[]}];
if (window.register_implementors) {window.register_implementors(implementors);} else {window.pending_implementors = implementors;}})()